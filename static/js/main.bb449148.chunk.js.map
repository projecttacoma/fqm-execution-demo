{"version":3,"sources":["components/inputs/radioButtons.tsx","components/inputs/checkboxes.tsx","components/inputs/datePicker.tsx","components/formatting/optionsRow.tsx","components/fileUpload/FileUpload.tsx","components/formatting/inputRow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RadioButtonsGroup","props","FormControl","component","RadioGroup","name","value","outputType","onChange","event","setOutputType","target","FormControlLabel","control","Radio","color","label","CheckboxesGroup","handleChange","setCalculationOptions","calculationOptions","checked","FormGroup","Checkbox","includeClauseResults","includePrettyResults","includeHighlighting","calculateSDEs","calculateHTML","MeasurementDatePicker","utils","DateFnsUtils","DatePicker","measurementPeriodDate","format","setMeasurementPeriodDate","OptionsRow","Fragment","Grid","item","xs","setMeasurementPeriodStart","measurementPeriodStart","setMeasurementPeriodEnd","measurementPeriodEnd","Container","styled","div","isDragAccept","isDragReject","isDragActive","getColor","FileUpload","onDrop","useDropzone","accept","getRootProps","getInputProps","className","InputRow","measureFileName","onMeasureUpload","patientFileName","onPatientUpload","useStyles","makeStyles","theme","createStyles","root","display","flexDirection","alignItems","margin","spacing","formControl","textField","marginLeft","marginRight","width","container","highlightedMarkup","whiteSpace","App","classes","useState","setMeasureFileName","setPatientFileName","results","setResults","htmls","setHTMLs","measureBundle","setMeasureBundle","patientBundle","setPatientBundle","useCallback","files","measureBundleFile","reader","FileReader","onload","path","JSON","parse","result","readAsText","patientBundleFile","Date","id","justify","Button","variant","onClick","options","toISOString","Calculator","calculateRaw","detailedResultsCalculation","calculate","IDhtml","i","detailedResults","undefined","push","groupId","html","calculateMeasureReports","calculateGapsInCare","direction","src","enableClipboard","collapsed","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb449148.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\ninterface Props {\n  setOutputType: Dispatch<SetStateAction<string>>;\n  outputType: string;\n}\n\nexport default function RadioButtonsGroup(props: Props) {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    props.setOutputType((event.target as HTMLInputElement).value);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup name=\"type\" value={props.outputType} onChange={handleChange}>\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"rawResults\" label=\"Raw\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"detailedResults\" label=\"Detailed\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"measureReports\" label=\"Measure Reports\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"gapsInCare\" label=\"Gaps In Care\" />\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nexport { RadioButtonsGroup };\n","import React, { Dispatch, SetStateAction } from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { CalculatorTypes } from 'fqm-execution';\n\ninterface Props {\n  setCalculationOptions: Dispatch<SetStateAction<CalculatorTypes.CalculationOptions>>;\n  calculationOptions: CalculatorTypes.CalculationOptions;\n}\n\nfunction CheckboxesGroup(props: Props) {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    props.setCalculationOptions({ ...props.calculationOptions, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <FormGroup>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={props.calculationOptions.includeClauseResults}\n            onChange={handleChange}\n            name=\"includeClauseResults\"\n            color=\"primary\"\n          />\n        }\n        label=\"Include Clause Results\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={props.calculationOptions.includePrettyResults}\n            onChange={handleChange}\n            name=\"includePrettyResults\"\n            color=\"primary\"\n          />\n        }\n        label=\"Include Pretty Results\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={props.calculationOptions.includeHighlighting}\n            onChange={handleChange}\n            name=\"includeHighlighting\"\n            color=\"primary\"\n          />\n        }\n        label=\"Include Highlighting\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={props.calculationOptions.calculateSDEs}\n            onChange={handleChange}\n            name=\"calculateSDEs\"\n            color=\"primary\"\n          />\n        }\n        label=\"Calculate SDEs\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={props.calculationOptions.calculateHTML}\n            onChange={handleChange}\n            name=\"calculateHTML\"\n            color=\"primary\"\n          />\n        }\n        label=\"Calculate HTML\"\n      />\n    </FormGroup>\n  );\n}\n\nexport { CheckboxesGroup };\n","import React, { Dispatch, SetStateAction } from 'react';\nimport DateFnsUtils from '@date-io/date-fns'; // choose your lib\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\n\ninterface Props {\n  setMeasurementPeriodDate: Dispatch<SetStateAction<Date | null>>;\n  measurementPeriodDate: Date | null;\n}\n\nfunction MeasurementDatePicker(props: Props) {\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <DatePicker value={props.measurementPeriodDate} format=\"MM/dd/yyyy\" onChange={props.setMeasurementPeriodDate} />\n    </MuiPickersUtilsProvider>\n  );\n}\n\nexport { MeasurementDatePicker };\n","import React, { Dispatch, SetStateAction } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { RadioButtonsGroup } from '../inputs/radioButtons';\nimport { CheckboxesGroup } from '../inputs/checkboxes';\nimport { MeasurementDatePicker } from '../inputs/datePicker';\nimport { CalculatorTypes } from 'fqm-execution';\n\ninterface Props {\n  setOutputType: Dispatch<SetStateAction<string>>;\n  outputType: string;\n  setMeasurementPeriodStart: Dispatch<SetStateAction<Date | null>>;\n  measurementPeriodStart: Date | null;\n  setMeasurementPeriodEnd: Dispatch<SetStateAction<Date | null>>;\n  measurementPeriodEnd: Date | null;\n  setCalculationOptions: Dispatch<SetStateAction<CalculatorTypes.CalculationOptions>>;\n  calculationOptions: CalculatorTypes.CalculationOptions;\n}\nexport default function OptionsRow(props: Props) {\n  return (\n    <React.Fragment>\n      <Grid item xs={4}>\n        <h3>Output Type:</h3>\n        <RadioButtonsGroup setOutputType={props.setOutputType} outputType={props.outputType} />\n      </Grid>\n      <Grid item xs={4}>\n        <h3>Calculation Options:</h3>\n        <CheckboxesGroup\n          setCalculationOptions={props.setCalculationOptions}\n          calculationOptions={props.calculationOptions}\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <h3>Measurement Start: </h3>\n        <MeasurementDatePicker\n          setMeasurementPeriodDate={props.setMeasurementPeriodStart}\n          measurementPeriodDate={props.measurementPeriodStart}\n        />\n        <h3>Measurement End: </h3>\n        <MeasurementDatePicker\n          setMeasurementPeriodDate={props.setMeasurementPeriodEnd}\n          measurementPeriodDate={props.measurementPeriodEnd}\n        />\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import { Grid } from '@material-ui/core';\nimport React from 'react';\nimport { DropEvent, DropzoneRootProps, FileRejection, useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\n\nconst getColor = (props: DropzoneRootProps) => {\n  if (props.isDragAccept) {\n    return '#00e676';\n  }\n  if (props.isDragReject) {\n    return '#ff1744';\n  }\n  if (props.isDragActive) {\n    return '#2196f3';\n  }\n  return '#eeeeee';\n};\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${(props: DropzoneRootProps) => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #7f7f7f;\n  outline: none;\n  transition: border 0.24s ease-in-out;\n`;\n\ninterface Props {\n  onDrop: <T extends File>(acceptedFiles: T[], fileRejections: FileRejection[], event: DropEvent) => void;\n}\n\nconst FileUpload = ({ onDrop }: Props) => {\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop,\n    accept: '.json'\n  });\n\n  return (\n    <Grid item xs={12}>\n      <Container {...getRootProps({ className: 'dropzone', isDragActive, isDragAccept, isDragReject })}>\n        <input {...getInputProps()} />\n        <p>Drag and drop file here, or click to select file</p>\n      </Container>\n    </Grid>\n  );\n};\n\nexport default FileUpload;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport FileUpload from '../fileUpload/FileUpload';\n\ninterface Props {\n  onMeasureUpload: (files: any) => void;\n  onPatientUpload: (files: any) => void;\n  measureFileName: string | null;\n  patientFileName: string | null;\n}\nexport default function InputRow(props: Props) {\n  return (\n    <React.Fragment>\n      <Grid item xs={6}>\n        <h2>Measure Bundle: </h2>\n        <h3>{props.measureFileName}</h3>\n        {props.measureFileName === null && <FileUpload onDrop={props.onMeasureUpload} />}\n      </Grid>\n      <Grid item xs={6}>\n        <h2>Patient Bundle: </h2>\n        <h3>{props.patientFileName}</h3>\n        {props.patientFileName === null && <FileUpload onDrop={props.onPatientUpload} />}\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport 'date-fns';\nimport './index.css';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport OptionsRow from './components/formatting/optionsRow';\nimport InputRow from './components/formatting/inputRow';\nimport Button from '@material-ui/core/Button';\nimport { Calculator, CalculatorTypes } from 'fqm-execution';\nimport ReactJson from 'react-json-view';\nimport parse from 'html-react-parser';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex-grow',\n      flexDirection: 'column',\n      alignItems: 'center',\n\n      '& > *': {\n        margin: theme.spacing(1)\n      }\n    },\n    formControl: {\n      margin: theme.spacing(1)\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200\n    },\n    container: {\n      display: 'flex-grow'\n    },\n    highlightedMarkup: {\n      '& pre': {\n        whiteSpace: 'pre-wrap'\n      }\n    }\n  })\n);\n\ninterface HTML {\n  groupId: string;\n  html: string;\n}\n\nexport default function App() {\n  const classes = useStyles();\n\n  const [measureFileName, setMeasureFileName] = useState<string | null>(null);\n  const [patientFileName, setPatientFileName] = useState<string | null>(null);\n\n  const [results, setResults] = useState<any>(null);\n\n  const [htmls, setHTMLs] = useState<HTML[]>([]);\n\n  const [measureBundle, setMeasureBundle] = useState<any>(null);\n  const [patientBundle, setPatientBundle] = useState<any>(null);\n\n  const onMeasureUpload = useCallback(files => {\n    const measureBundleFile = files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setMeasureFileName(measureBundleFile.path);\n      setMeasureBundle(JSON.parse(reader.result as string));\n    };\n\n    reader.readAsText(measureBundleFile);\n  }, []);\n\n  const onPatientUpload = useCallback(files => {\n    const patientBundleFile = files[0];\n\n    const reader = new FileReader();\n    reader.onload = () => {\n      setPatientFileName(patientBundleFile.path);\n      setPatientBundle(JSON.parse(reader.result as string));\n    };\n\n    reader.readAsText(patientBundleFile);\n  }, []);\n\n  const [outputType, setOutputType] = useState<string>('raw');\n  const [measurementPeriodStart, setMeasurementPeriodStart] = useState<Date | null>(new Date('1/1/2019'));\n  const [measurementPeriodEnd, setMeasurementPeriodEnd] = useState<Date | null>(new Date('12/31/2019'));\n  const [calculationOptions, setCalculationOptions] = useState<CalculatorTypes.CalculationOptions>({\n    calculateHTML: false,\n    calculateSDEs: false,\n    includeClauseResults: false,\n    includeHighlighting: false,\n    includePrettyResults: false\n  });\n\n  return (\n    <div className={classes.root}>\n      <Grid>\n        <h1 id=\"header\">FQM Execution Demo</h1>\n        <Grid container justify=\"space-evenly\">\n          <Grid container item xs={11} spacing={2} alignItems=\"center\">\n            <InputRow\n              onMeasureUpload={onMeasureUpload}\n              onPatientUpload={onPatientUpload}\n              measureFileName={measureFileName}\n              patientFileName={patientFileName}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} justify=\"space-evenly\">\n          <Grid container item xs={11} spacing={2}>\n            <OptionsRow\n              setOutputType={setOutputType}\n              outputType={outputType}\n              setMeasurementPeriodStart={setMeasurementPeriodStart}\n              measurementPeriodStart={measurementPeriodStart}\n              setMeasurementPeriodEnd={setMeasurementPeriodEnd}\n              measurementPeriodEnd={measurementPeriodEnd}\n              setCalculationOptions={setCalculationOptions}\n              calculationOptions={calculationOptions}\n            />\n          </Grid>\n        </Grid>\n\n        <Grid container justify=\"flex-end\">\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              setMeasureFileName(null);\n              setPatientFileName(null);\n              setMeasureBundle(null);\n              setPatientBundle(null);\n              setMeasurementPeriodStart(new Date('1/1/2019'));\n              setMeasurementPeriodEnd(new Date('12/31/2019'));\n              setCalculationOptions({\n                calculateHTML: false,\n                calculateSDEs: false,\n                includeClauseResults: false,\n                includeHighlighting: false,\n                includePrettyResults: false\n              });\n              setResults(null);\n              setHTMLs([]);\n            }}\n          >\n            Reset\n          </Button>\n\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              const options = {\n                measurementPeriodStart: measurementPeriodStart?.toISOString(),\n                measurementPeriodEnd: measurementPeriodEnd?.toISOString(),\n                ...calculationOptions\n              };\n\n              if (outputType === 'rawResults') {\n                setResults(Calculator.calculateRaw(measureBundle, [patientBundle], options));\n              } else if (outputType === 'detailedResults') {\n                let detailedResultsCalculation = Calculator.calculate(measureBundle, [patientBundle], options);\n                setResults(detailedResultsCalculation);\n                let IDhtml = [];\n                if (detailedResultsCalculation !== null && calculationOptions.calculateHTML === true) {\n                  let i: any;\n                  for (i in detailedResultsCalculation.results[0].detailedResults) {\n                    if (detailedResultsCalculation.results[0].detailedResults !== undefined) {\n                      IDhtml.push({\n                        groupId: detailedResultsCalculation.results[0].detailedResults[i].groupId,\n                        html: detailedResultsCalculation.results[0].detailedResults[i].html!\n                      });\n                    }\n                  }\n                  setHTMLs(IDhtml);\n                } else {\n                  setHTMLs([]);\n                }\n              } else if (outputType === 'measureReports') {\n                setResults(Calculator.calculateMeasureReports(measureBundle, [patientBundle], options));\n              } else if (outputType === 'gapsInCare') {\n                setResults(Calculator.calculateGapsInCare(measureBundle, [patientBundle], options));\n              }\n            }}\n          >\n            Calculate\n          </Button>\n        </Grid>\n        <Grid container>\n          <Grid container item xs={6} direction=\"row\">\n            <div>\n              <h2>Results:</h2>\n              {results && (\n                <ReactJson src={results} enableClipboard={true} theme=\"shapeshifter:inverted\" collapsed={2} />\n              )}\n            </div>\n          </Grid>\n          <Grid container item xs={6} direction=\"row\">\n            {htmls &&\n              htmls.map(html => {\n                return (\n                  <div key={html.groupId} className={classes.highlightedMarkup}>\n                    <h2>HTML:</h2>\n                    {parse(html.html)}\n                  </div>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}