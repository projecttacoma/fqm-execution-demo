{"version":3,"sources":["state/calculationOptions.ts","state/outputType.ts","state/measurementPeriod.ts","state/bundles.ts","state/dropdowns.ts","state/results.ts","components/FileUpload/FileUpload.tsx","components/Dropdowns/FileImportDropdowns.tsx","components/Utils/Loading.tsx","components/Layout/DataImportRow.tsx","components/CalculationOptions/CalculationOptions.tsx","components/CalculationOptions/MeasurementPeriod.tsx","components/CalculationOptions/OutputType.tsx","components/CalculationOptions/ReportType.tsx","components/Layout/OptionsRow.tsx","components/Results/Results.tsx","components/Results/PopulationResults.tsx","components/Helpers/PatientHelper.ts","components/Results/DetectedIssueResources.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["calculationOptionsState","atom","key","default","calculateHTML","calculateSDEs","outputTypeState","measurementPeriodState","measurementPeriodStart","Date","measurementPeriodEnd","measureFileState","name","content","patientFileState","measureDropdownSelector","selector","get","a","fetch","response","json","data","map","n","measureDropdownOptionsState","patientDropdownOptionsState","filter","startsWith","resultsState","Container","styled","div","props","isDragAccept","isDragReject","isDragActive","getColor","MeasureFileUpload","setMeasureFileState","useSetRecoilState","setResults","onMeasureUpload","useCallback","files","measureBundleFile","reader","FileReader","onload","path","JSON","parse","result","fromFileUpload","readAsText","useDropzone","onDrop","accept","getRootProps","getInputProps","Grid","item","xs","className","PatientFileUpload","setPatientFileState","onPatientUpload","patientBundleFile","useStyles","makeStyles","theme","createStyles","root","width","MeasureDropdown","classes","measureOptions","useRecoilValue","useRecoilState","measureFile","setMeasureFile","style","FormControl","Select","value","onChange","event","target","then","catch","error","console","log","disabled","option","MenuItem","PatientDropdown","patientFile","setPatientFile","patientOptions","Loading","container","justify","CircularProgress","fileName","color","DataImportRow","Fragment","IconButton","aria-label","onClick","fontSize","fallback","CalculationOptionsButtons","outputType","calculationOptions","setCalculationOptions","handleChange","checked","FormGroup","FormControlLabel","control","Checkbox","reportType","label","MeasurementPeriodDatePicker","measurementPeriod","setMeasurementPeriod","utils","DateFnsUtils","DatePicker","format","OutputTypeButtons","setOutputType","component","RadioGroup","Radio","ReportTypeButtons","OptionsRow","OutputType","CalculationOptions","ReportType","MeasurementPeriod","highlightedMarkup","whiteSpace","Results","htmls","results","detectedIssues","fhirpath","evaluate","direction","spacing","alignItems","group","id","split","issue","detectedIssueId","length","detectedIssue","fileDownload","stringify","includes","GetApp","src","enableClipboard","collapsed","html","groupId","table","tableCell","padding","PopulationResults","patientResource","bundle","patientID","e","entry","find","resource","undefined","findPatientInBundle","columns","i","push","rows","Table","size","TableHead","TableRow","column","TableCell","align","TableBody","row","DetectedIssueResources","guidanceResponseArray","guidanceResponseId","Accordion","AccordionSummary","AccordionDetails","Typography","overflowWrap","code","display","flexDirection","margin","formControl","textField","marginLeft","marginRight","buttons","App","useState","setHTMLs","calculate","options","toISOString","Calculator","calculateRaw","detailedResults","forEach","dr","calculateMeasureReports","mrResults","mrs","Array","isArray","m","text","calculateGapsInCare","measureReportEntry","resourceType","measureReport","Button","variant","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07fe6ceb.chunk.js","sourcesContent":["import { atom } from 'recoil';\r\nimport { CalculatorTypes } from 'fqm-execution';\r\n\r\nexport const calculationOptionsState = atom<CalculatorTypes.CalculationOptions>({\r\n  key: 'calculationOptions',\r\n  default: {\r\n    calculateHTML: false,\r\n    calculateSDEs: false\r\n  }\r\n});\r\n","import { atom } from 'recoil';\r\n\r\nexport const outputTypeState = atom<string>({\r\n  key: 'outputType',\r\n  default: 'rawResults'\r\n});\r\n","import { atom } from 'recoil';\r\n\r\nexport interface MeasurementPeriodState {\r\n  measurementPeriodStart: Date | null;\r\n  measurementPeriodEnd: Date | null;\r\n}\r\n\r\nexport const measurementPeriodState = atom<MeasurementPeriodState>({\r\n  key: 'measurementPeriod',\r\n  default: {\r\n    measurementPeriodStart: new Date('1/1/2019'),\r\n    measurementPeriodEnd: new Date('12/31/2019')\r\n  }\r\n});\r\n","import { R4 } from '@ahryman40k/ts-fhir-types';\r\nimport { atom } from 'recoil';\r\n\r\nexport interface FileUploadState {\r\n  name: string | null;\r\n  content: R4.IBundle | null;\r\n  fromFileUpload?: boolean;\r\n}\r\n\r\nexport const measureFileState = atom<FileUploadState>({\r\n  key: 'measureFile',\r\n  default: {\r\n    name: null,\r\n    content: null\r\n  }\r\n});\r\n\r\nexport const patientFileState = atom<FileUploadState>({\r\n  key: 'patientFile',\r\n  default: {\r\n    name: null,\r\n    content: null\r\n  }\r\n});\r\n","import { atom, selector } from 'recoil';\r\nimport { measureFileState } from './bundles';\r\n\r\nconst measureDropdownSelector = selector({\r\n  key: 'measureDropdownSelector',\r\n  get: async () => {\r\n    try {\r\n      const response = await fetch('https://api.github.com/repos/dbcg/connectathon/contents/fhir401/bundles/measure');\r\n      const data = await response.json();\r\n\r\n      return data.map((n: { name: string }) => {\r\n        return n.name;\r\n      });\r\n    } catch (e) {\r\n      return [];\r\n    }\r\n  }\r\n});\r\n\r\nexport const measureDropdownOptionsState = atom<string[]>({\r\n  key: 'measureDropdownOptions',\r\n  default: measureDropdownSelector\r\n});\r\n\r\nexport const patientDropdownOptionsState = selector({\r\n  key: 'patientDropdownOptions',\r\n  get: async ({ get }) => {\r\n    const { name } = get(measureFileState);\r\n\r\n    if (name) {\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.github.com/repos/dbcg/connectathon/contents/fhir401/bundles/measure/${name}/${name}-files`\r\n        );\r\n        const data = (await response.json()) as { name: string }[];\r\n        return data\r\n          .map(n => {\r\n            return n.name;\r\n          })\r\n          .filter(n => {\r\n            return n.startsWith('tests');\r\n          });\r\n      } catch (e) {\r\n        return [];\r\n      }\r\n    }\r\n\r\n    return [];\r\n  }\r\n});\r\n","import { atom } from 'recoil';\r\n\r\nexport const resultsState = atom<any>({\r\n  key: 'results',\r\n  default: null\r\n});\r\n","import { R4 } from '@ahryman40k/ts-fhir-types';\r\nimport { Grid } from '@material-ui/core';\r\nimport React, { useCallback } from 'react';\r\nimport { DropzoneRootProps, useDropzone } from 'react-dropzone';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport styled from 'styled-components';\r\nimport { measureFileState, patientFileState, resultsState } from '../../state';\r\n\r\nconst getColor = (props: DropzoneRootProps) => {\r\n  if (props.isDragAccept) {\r\n    return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n    return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n    return '#2196f3';\r\n  }\r\n  return '#eeeeee';\r\n};\r\n\r\nconst Container = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-width: 2px;\r\n  border-radius: 2px;\r\n  border-color: ${(props: DropzoneRootProps) => getColor(props)};\r\n  border-style: dashed;\r\n  background-color: #fafafa;\r\n  color: #7f7f7f;\r\n  outline: none;\r\n  transition: border 0.24s ease-in-out;\r\n`;\r\n\r\nexport const MeasureFileUpload = () => {\r\n  const setMeasureFileState = useSetRecoilState(measureFileState);\r\n  const setResults = useSetRecoilState(resultsState);\r\n\r\n  const onMeasureUpload = useCallback(\r\n    files => {\r\n      setResults(null);\r\n      const measureBundleFile = files[0];\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setMeasureFileState({\r\n          name: measureBundleFile.path,\r\n          content: JSON.parse(reader.result as string) as R4.IBundle,\r\n          fromFileUpload: true\r\n        });\r\n      };\r\n      reader.readAsText(measureBundleFile);\r\n    },\r\n    [setMeasureFileState, setResults]\r\n  );\r\n\r\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\r\n    onDrop: onMeasureUpload,\r\n    accept: '.json'\r\n  });\r\n\r\n  return (\r\n    <Grid item xs={12}>\r\n      <Container {...getRootProps({ className: 'dropzone', isDragActive, isDragAccept, isDragReject })}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag and drop file here, or click to select file</p>\r\n      </Container>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport const PatientFileUpload = () => {\r\n  const setPatientFileState = useSetRecoilState(patientFileState);\r\n  const setResults = useSetRecoilState(resultsState);\r\n\r\n  const onPatientUpload = useCallback(\r\n    files => {\r\n      setResults(null);\r\n      const patientBundleFile = files[0];\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setPatientFileState({\r\n          name: patientBundleFile.path,\r\n          content: JSON.parse(reader.result as string) as R4.IBundle,\r\n          fromFileUpload: true\r\n        });\r\n      };\r\n      reader.readAsText(patientBundleFile);\r\n    },\r\n    [setPatientFileState, setResults]\r\n  );\r\n\r\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\r\n    onDrop: onPatientUpload,\r\n    accept: '.json'\r\n  });\r\n\r\n  return (\r\n    <Grid item xs={12}>\r\n      <Container {...getRootProps({ className: 'dropzone', isDragActive, isDragAccept, isDragReject })}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag and drop file here, or click to select file</p>\r\n      </Container>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport { R4 } from '@ahryman40k/ts-fhir-types';\r\nimport {\r\n  measureDropdownOptionsState,\r\n  measureFileState,\r\n  patientDropdownOptionsState,\r\n  patientFileState,\r\n  resultsState\r\n} from '../../state';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%'\r\n    }\r\n  })\r\n);\r\n\r\nexport function MeasureDropdown() {\r\n  const classes = useStyles();\r\n  const measureOptions = useRecoilValue(measureDropdownOptionsState);\r\n  const [measureFile, setMeasureFile] = useRecoilState(measureFileState);\r\n  const setResults = useSetRecoilState(resultsState);\r\n\r\n  const onMeasureDropdownChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setResults(null);\r\n    const name = event.target.value as string;\r\n\r\n    fetch(\r\n      `https://raw.githubusercontent.com/DBCG/connectathon/master/fhir401/bundles/measure/` +\r\n        name +\r\n        `/` +\r\n        name +\r\n        `-bundle.json`\r\n    )\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setMeasureFile({\r\n          name,\r\n          content: data as R4.IBundle,\r\n          fromFileUpload: false\r\n        });\r\n      })\r\n      .catch(error => console.log('error: ', error));\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '100%' }}>\r\n      <FormControl className={classes.root}>\r\n        <Select\r\n          value={measureFile.name || ''}\r\n          onChange={onMeasureDropdownChange}\r\n          disabled={measureFile.content !== null && measureFile.fromFileUpload === true}\r\n        >\r\n          {measureOptions.map(option => (\r\n            <MenuItem key={option} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function PatientDropdown() {\r\n  const classes = useStyles();\r\n\r\n  const [patientFile, setPatientFile] = useRecoilState(patientFileState);\r\n  const measureFile = useRecoilValue(measureFileState);\r\n  const patientOptions = useRecoilValue(patientDropdownOptionsState);\r\n  const setResults = useSetRecoilState(resultsState);\r\n\r\n  const onPatientDropdownChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setResults(null);\r\n    const name = event.target.value as string;\r\n    fetch(\r\n      `https://raw.githubusercontent.com/DBCG/connectathon/master/fhir401/bundles/measure/${measureFile.name}/${measureFile.name}-files/${name}`\r\n    )\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setPatientFile({\r\n          name,\r\n          content: data as R4.IBundle,\r\n          fromFileUpload: false\r\n        });\r\n      })\r\n      .catch(error => console.log('error: ', error));\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '100%' }}>\r\n      <FormControl className={classes.root}>\r\n        <Select\r\n          value={patientFile.name || ''}\r\n          onChange={onPatientDropdownChange}\r\n          disabled={patientFile.content !== null && patientFile.fromFileUpload === true}\r\n        >\r\n          {patientOptions.map(option => (\r\n            <MenuItem key={option} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { CircularProgress, Grid } from '@material-ui/core';\r\n\r\nconst Loading = () => (\r\n  <Grid container justify=\"center\">\r\n    <CircularProgress />\r\n  </Grid>\r\n);\r\n\r\nexport default Loading;\r\n","import React, { Suspense } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { MeasureFileUpload, PatientFileUpload } from '../FileUpload';\r\nimport { MeasureDropdown, PatientDropdown } from '../Dropdowns';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport { useRecoilState } from 'recoil';\r\nimport { measureFileState, patientFileState } from '../../state';\r\nimport { Loading } from '../Utils';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fileName: {\r\n      color: '#009688'\r\n    }\r\n  })\r\n);\r\n\r\nexport default function DataImportRow() {\r\n  const classes = useStyles();\r\n\r\n  const [measureFile, setMeasureFile] = useRecoilState(measureFileState);\r\n  const [patientFile, setPatientFile] = useRecoilState(patientFileState);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid item xs={6}>\r\n        <h2>Measure Bundle: </h2>\r\n        <Grid container>\r\n          {measureFile.name !== null ? (\r\n            <>\r\n              <h3 className={classes.fileName}> {measureFile.name}</h3>\r\n              <IconButton\r\n                aria-label=\"delete\"\r\n                onClick={() => {\r\n                  setMeasureFile({\r\n                    name: null,\r\n                    content: null\r\n                  });\r\n                  setPatientFile({\r\n                    name: null,\r\n                    content: null\r\n                  });\r\n                }}\r\n              >\r\n                <DeleteIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </>\r\n          ) : (\r\n            <h3 className={classes.fileName}>None Selected</h3>\r\n          )}\r\n        </Grid>\r\n        <h4>Upload From File System:</h4>\r\n        <MeasureFileUpload />\r\n        <h4>OR Select From Connectathon Repository:</h4>\r\n        <Suspense fallback={<Loading />}>\r\n          <MeasureDropdown />\r\n        </Suspense>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <h2>Patient Bundle: </h2>\r\n        <Grid container>\r\n          {patientFile.name !== null ? (\r\n            <>\r\n              <h3 className={classes.fileName}>{patientFile.name}</h3>\r\n              <IconButton\r\n                aria-label=\"delete\"\r\n                onClick={() => {\r\n                  setPatientFile({\r\n                    name: null,\r\n                    content: null\r\n                  });\r\n                }}\r\n              >\r\n                <DeleteIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </>\r\n          ) : (\r\n            <h3 className={classes.fileName}>None Selected</h3>\r\n          )}\r\n        </Grid>\r\n        <h4>Upload From File System:</h4>\r\n        <PatientFileUpload />\r\n        <h4>OR Select From Connectathon Repository:</h4>\r\n        <Suspense fallback={<Loading />}>\r\n          <PatientDropdown />\r\n        </Suspense>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { calculationOptionsState, outputTypeState } from '../../state';\r\n\r\nfunction CalculationOptionsButtons() {\r\n  const outputType = useRecoilValue(outputTypeState);\r\n  const [calculationOptions, setCalculationOptions] = useRecoilState(calculationOptionsState);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCalculationOptions({\r\n      ...calculationOptions,\r\n      [event.target.name]: event.target.checked\r\n    });\r\n  };\r\n\r\n  return (\r\n    <FormGroup>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={outputType !== 'rawResults' && calculationOptions.calculateSDEs}\r\n            onChange={handleChange}\r\n            disabled={\r\n              outputType === 'rawResults' ||\r\n              (outputType === 'measureReports' && calculationOptions.reportType === 'summary')\r\n            }\r\n            name=\"calculateSDEs\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Calculate SDEs\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={outputType !== 'rawResults' && calculationOptions.calculateHTML}\r\n            onChange={handleChange}\r\n            disabled={\r\n              outputType === 'rawResults' ||\r\n              (outputType === 'measureReports' && calculationOptions.reportType === 'summary')\r\n            }\r\n            name=\"calculateHTML\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Calculate HTML\"\r\n      />\r\n    </FormGroup>\r\n  );\r\n}\r\n\r\nexport default CalculationOptionsButtons;\r\n","import React from 'react';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport { useRecoilState } from 'recoil';\r\nimport { measurementPeriodState } from '../../state';\r\n\r\nfunction MeasurementPeriodDatePicker() {\r\n  const [measurementPeriod, setMeasurementPeriod] = useRecoilState(measurementPeriodState);\r\n\r\n  const setStart = (value: Date | null) => {\r\n    setMeasurementPeriod({\r\n      ...measurementPeriod,\r\n      measurementPeriodStart: value\r\n    });\r\n  };\r\n\r\n  const setEnd = (value: Date | null) => {\r\n    setMeasurementPeriod({\r\n      ...measurementPeriod,\r\n      measurementPeriodEnd: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <h3>Measurement Start: </h3>\r\n      <DatePicker value={measurementPeriod.measurementPeriodStart} format=\"MM/dd/yyyy\" onChange={setStart} />\r\n      <h3>Measurement End: </h3>\r\n      <DatePicker value={measurementPeriod.measurementPeriodEnd} format=\"MM/dd/yyyy\" onChange={setEnd} />\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}\r\n\r\nexport default MeasurementPeriodDatePicker;\r\n","import React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { useRecoilState } from 'recoil';\r\nimport { outputTypeState } from '../../state';\r\n\r\nfunction OutputTypeButtons() {\r\n  const [outputType, setOutputType] = useRecoilState(outputTypeState);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = (event.target as HTMLInputElement).value;\r\n    setOutputType(value);\r\n  };\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <RadioGroup name=\"type\" value={outputType} onChange={handleChange}>\r\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"rawResults\" label=\"Raw\" />\r\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"detailedResults\" label=\"Detailed\" />\r\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"measureReports\" label=\"Measure Reports\" />\r\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"gapsInCare\" label=\"Gaps In Care\" />\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default OutputTypeButtons;\r\n","import React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { calculationOptionsState, outputTypeState } from '../../state';\r\n\r\nfunction ReportTypeButtons() {\r\n  const outputType = useRecoilValue(outputTypeState);\r\n  const [calculationOptions, setCalculationOptions] = useRecoilState(calculationOptionsState);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = (event.target as HTMLInputElement).value;\r\n    setCalculationOptions({\r\n      ...calculationOptions,\r\n      reportType: value as 'subject-list' | 'summary' | 'individual' | undefined\r\n    });\r\n  };\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <RadioGroup name=\"type\" value={calculationOptions.reportType} onChange={handleChange}>\r\n        <FormControlLabel\r\n          control={<Radio color=\"primary\" />}\r\n          value=\"individual\"\r\n          label=\"Individual\"\r\n          disabled={outputType !== 'measureReports' && outputType !== 'gapsInCare'}\r\n        />\r\n        <FormControlLabel\r\n          control={<Radio color=\"primary\" />}\r\n          value=\"summary\"\r\n          label=\"Summary\"\r\n          disabled={outputType !== 'measureReports' && outputType !== 'gapsInCare'}\r\n        />\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default ReportTypeButtons;\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {\r\n  CalculationOptionsButtons,\r\n  MeasurementPeriodDatePicker,\r\n  OutputTypeButtons,\r\n  ReportTypeButtons\r\n} from '../CalculationOptions';\r\n\r\nexport default function OptionsRow() {\r\n  return (\r\n    <React.Fragment>\r\n      <Grid item xs={3}>\r\n        <h3>Output Type:</h3>\r\n        <OutputTypeButtons />\r\n      </Grid>\r\n      <Grid item xs={3}>\r\n        <h3>Calculation Options:</h3>\r\n        <CalculationOptionsButtons />\r\n      </Grid>\r\n      <Grid item xs={3}>\r\n        <h3>Report Type:</h3>\r\n        <ReportTypeButtons />\r\n      </Grid>\r\n      <Grid item xs={3}>\r\n        <MeasurementPeriodDatePicker />\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import { makeStyles, Grid, IconButton } from '@material-ui/core';\r\nimport ReactJson from 'react-json-view';\r\nimport parse from 'html-react-parser';\r\nimport fileDownload from 'js-file-download';\r\nimport React from 'react';\r\nimport { FileUploadState } from '../../state';\r\nimport { GetApp } from '@material-ui/icons';\r\nimport { HTML } from '../../App';\r\nimport { PopulationResults, DetectedIssueResources } from '../Results';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { calculationOptionsState, outputTypeState, resultsState } from '../../state';\r\nimport { R4 } from '@ahryman40k/ts-fhir-types';\r\nimport fhirpath from 'fhirpath';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  highlightedMarkup: {\r\n    '& pre': {\r\n      whiteSpace: 'pre-wrap'\r\n    }\r\n  }\r\n}));\r\n\r\ninterface Props {\r\n  measureFile: FileUploadState;\r\n  htmls: HTML[];\r\n}\r\n\r\nconst Results: React.FC<Props> = ({ measureFile, htmls }) => {\r\n  const classes = useStyles();\r\n  const outputType = useRecoilValue(outputTypeState);\r\n  const calculationOptions = useRecoilValue(calculationOptionsState);\r\n  const results = useRecoilValue(resultsState);\r\n  const detectedIssues = fhirpath.evaluate(results, 'Bundle.entry.resource.DetectedIssue');\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid container item xs={12} direction=\"column\" spacing={2}>\r\n        <h2>Results:</h2>\r\n        <Grid container item xs={12} direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n          {outputType === 'measureReports' &&\r\n            calculationOptions.reportType === 'individual' &&\r\n            fhirpath.evaluate(results, 'MeasureReport.group').map((group: R4.IMeasureReport_Group) => {\r\n              const id = results ? fhirpath.evaluate(results, 'MeasureReport.subject.reference')[0].split('/') : '';\r\n              return (\r\n                <Grid container item xs={12} direction=\"column\" justify=\"center\" alignItems=\"center\" key={group.id}>\r\n                  <h2>{group.id} Population Results</h2>\r\n                  <PopulationResults key={group.id} results={group} id={id} />\r\n                </Grid>\r\n              );\r\n            })}\r\n          {results &&\r\n            detectedIssues.map((issue: R4.IDetectedIssue) => {\r\n              const detectedIssueId = fhirpath.evaluate(issue, 'id');\r\n              return (\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={12}\r\n                  direction=\"column\"\r\n                  justify=\"center\"\r\n                  alignItems=\"center\"\r\n                  key={detectedIssueId}\r\n                >\r\n                  <h3>Detected Issue</h3>\r\n                  <h4>{fhirpath.evaluate(issue, 'contained.GuidanceResponse').length} Guidance Response(s)</h4>\r\n                  <DetectedIssueResources detectedIssue={issue} />\r\n                </Grid>\r\n              );\r\n            })}\r\n        </Grid>\r\n        <Grid container item xs={12} direction=\"row\">\r\n          <Grid item xs>\r\n            <Grid container item xs direction=\"row\">\r\n              {results && <h2>JSON:</h2>}\r\n              {results && (\r\n                <IconButton\r\n                  onClick={() => {\r\n                    fileDownload(\r\n                      JSON.stringify(results, null, 2),\r\n                      measureFile.name?.includes('.json')\r\n                        ? `results-${measureFile.name}`\r\n                        : `results-${measureFile.name}.json`\r\n                    );\r\n                  }}\r\n                >\r\n                  <GetApp fontSize=\"small\" />\r\n                </IconButton>\r\n              )}\r\n            </Grid>\r\n            {results && <ReactJson src={results} enableClipboard={true} theme=\"shapeshifter:inverted\" collapsed={2} />}\r\n          </Grid>\r\n          <Grid item xs>\r\n            {results &&\r\n              htmls &&\r\n              htmls.map(html => {\r\n                return (\r\n                  <div key={html.groupId} className={classes.highlightedMarkup}>\r\n                    <h2>HTML:</h2>\r\n                    {parse(html.html)}\r\n                  </div>\r\n                );\r\n              })}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import { makeStyles, Table, TableRow, TableHead, TableCell, TableBody } from '@material-ui/core';\r\nimport { patientFileState } from '../../state';\r\nimport React from 'react';\r\nimport { findPatientInBundle } from '../Helpers';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { R4 } from '@ahryman40k/ts-fhir-types';\r\nimport fhirpath from 'fhirpath';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    width: 100\r\n  },\r\n  tableCell: {\r\n    padding: '0px 10px'\r\n  }\r\n});\r\n\r\ninterface Props {\r\n  results: R4.IMeasureReport_Group;\r\n  id: string;\r\n}\r\n\r\nconst PopulationResults: React.FC<Props> = ({ results, id }) => {\r\n  const patientFile = useRecoilValue(patientFileState);\r\n  const patientResource = patientFile.content === null ? null : findPatientInBundle(patientFile.content, id[1]);\r\n  const classes = useStyles();\r\n\r\n  const columns = ['Patient Name', 'DOB', 'Gender'];\r\n\r\n  for (let i = 0; i < fhirpath.evaluate(results, 'population').length; i++) {\r\n    columns.push(fhirpath.evaluate(results, `population.code.coding.display[${i}]`));\r\n  }\r\n\r\n  const rows = [\r\n    `${fhirpath.evaluate(patientResource, 'Patient.name.given')} ${fhirpath.evaluate(\r\n      patientResource,\r\n      'Patient.name.family'\r\n    )}`,\r\n    fhirpath.evaluate(patientResource, 'Patient.birthDate'),\r\n    fhirpath.evaluate(patientResource, 'Patient.gender')\r\n  ];\r\n\r\n  for (let i in fhirpath.evaluate(results, 'population')) {\r\n    rows.push(fhirpath.evaluate(results, `population.count[${i}]`));\r\n  }\r\n\r\n  return (\r\n    <Table className={classes.table} size=\"small\">\r\n      <TableHead>\r\n        <TableRow>\r\n          {columns.map(column => (\r\n            <TableCell className={classes.tableCell} align=\"left\">\r\n              {column}\r\n            </TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n      <TableBody>\r\n        {rows.map(row => (\r\n          <TableCell align=\"left\">{row}</TableCell>\r\n        ))}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default PopulationResults;\r\n","import { R4 } from '@ahryman40k/ts-fhir-types';\r\n\r\nexport function findPatientInBundle(bundle: R4.IBundle, patientID: string): R4.IPatient | null {\r\n  const e = bundle.entry?.find(e => e.resource?.id === patientID);\r\n  if (e === undefined) {\r\n    return null;\r\n  } else {\r\n    return e?.resource as R4.IPatient;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Accordion, AccordionSummary, AccordionDetails, Grid, Typography } from '@material-ui/core';\r\nimport { R4 } from '@ahryman40k/ts-fhir-types';\r\nimport fhirpath from 'fhirpath';\r\n\r\ninterface Props {\r\n  detectedIssue: R4.IDetectedIssue;\r\n}\r\n\r\nconst DetectedIssueResources: React.FC<Props> = ({ detectedIssue }) => {\r\n  const guidanceResponseArray = fhirpath.evaluate(detectedIssue, 'contained.GuidanceResponse');\r\n\r\n  return (\r\n    <div>\r\n      {guidanceResponseArray.map((response: R4.IGuidanceResponse) => {\r\n        const guidanceResponseId = fhirpath.evaluate(response, 'id');\r\n        return (\r\n          <Accordion key={guidanceResponseId}>\r\n            <AccordionSummary>\r\n              <Grid item xs>\r\n                <h4>\r\n                  {fhirpath.evaluate(response, 'resourceType')} {guidanceResponseId}{' '}\r\n                </h4>\r\n              </Grid>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Grid container item xs direction=\"row\">\r\n                <Grid container xs={6} direction=\"column\">\r\n                  <Grid item xs>\r\n                    <h4>dataRequirement:</h4>\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    type: {fhirpath.evaluate(response, 'dataRequirement.type')}\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <h5>codeFilter:</h5>\r\n                  </Grid>\r\n                  <Grid>path: {fhirpath.evaluate(response, 'dataRequirement.codeFilter.path[0]')}</Grid>\r\n                  <Grid item xs>\r\n                    <Typography style={{ overflowWrap: 'break-word' }}>\r\n                      valueSet: {fhirpath.evaluate(response, 'dataRequirement.codeFilter.valueSet')}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    path: {fhirpath.evaluate(response, 'dataRequirement.codeFilter.path[1]')}\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    {fhirpath.evaluate(response, 'dataRequirement.codeFilter.code.code').map((code: string) => {\r\n                      return (\r\n                        <Grid item xs>\r\n                          code: {code}\r\n                        </Grid>\r\n                      );\r\n                    })}\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <h5>dateFilter:</h5>\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    path: {fhirpath.evaluate(response, 'dataRequirement.dateFilter.path')}\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    valuePeriod:\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    start: {fhirpath.evaluate(response, 'dataRequirement.dateFilter.valuePeriod.start')}\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    end: {fhirpath.evaluate(response, 'dataRequirement.dateFilter.valuePeriod.end')}\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container item xs={6} direction=\"column\">\r\n                  <Grid item xs>\r\n                    <h4>reasonCode:</h4>\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    system: {fhirpath.evaluate(response, 'reasonCode.coding.system')}\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    code: {fhirpath.evaluate(response, 'reasonCode.coding.code')}\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    display: {fhirpath.evaluate(response, 'reasonCode.coding.display')}\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetectedIssueResources;\r\n","import React, { useState } from 'react';\r\nimport 'date-fns';\r\nimport './index.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { OptionsRow, DataImportRow } from './components/Layout';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Calculator, CalculatorTypes } from 'fqm-execution';\r\nimport { R4 } from '@ahryman40k/ts-fhir-types';\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport {\r\n  calculationOptionsState,\r\n  measureFileState,\r\n  measurementPeriodState,\r\n  outputTypeState,\r\n  patientFileState,\r\n  resultsState\r\n} from './state';\r\nimport Results from './components/Results';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex-grow',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n\r\n      '& > *': {\r\n        margin: theme.spacing(1)\r\n      }\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200\r\n    },\r\n    container: {\r\n      display: 'flex-grow'\r\n    },\r\n    buttons: {\r\n      margin: '4px'\r\n    }\r\n  })\r\n);\r\n\r\nexport interface HTML {\r\n  groupId: string;\r\n  html: string;\r\n}\r\n\r\nexport default function App() {\r\n  const classes = useStyles();\r\n\r\n  const setResults = useSetRecoilState(resultsState);\r\n  const [htmls, setHTMLs] = useState<HTML[]>([]);\r\n\r\n  const [measureFile, setMeasureFile] = useRecoilState(measureFileState);\r\n  const [patientFile, setPatientFile] = useRecoilState(patientFileState);\r\n  const [calculationOptions, setCalculationOptions] = useRecoilState(calculationOptionsState);\r\n  const outputType = useRecoilValue(outputTypeState);\r\n  const measurementPeriod = useRecoilValue(measurementPeriodState);\r\n\r\n  const calculate = async () => {\r\n    const options: CalculatorTypes.CalculationOptions = {\r\n      ...calculationOptions,\r\n      measurementPeriodStart: measurementPeriod.measurementPeriodStart?.toISOString(),\r\n      measurementPeriodEnd: measurementPeriod.measurementPeriodEnd?.toISOString()\r\n    };\r\n\r\n    // Clear existing results before new calculation\r\n    setResults(null);\r\n    setHTMLs([]);\r\n\r\n    if (outputType === 'rawResults') {\r\n      if (measureFile.content && patientFile.content) {\r\n        const { results } = await Calculator.calculateRaw(measureFile.content, [patientFile.content], options);\r\n        setResults(results);\r\n      }\r\n    } else if (outputType === 'detailedResults') {\r\n      if (measureFile.content && patientFile.content) {\r\n        const { results } = await Calculator.calculate(measureFile.content, [patientFile.content], options);\r\n        setResults(results);\r\n        let html: HTML[] = [];\r\n        if (results !== null && calculationOptions.calculateHTML === true) {\r\n          results[0].detailedResults?.forEach(dr => {\r\n            html.push({\r\n              groupId: dr.groupId,\r\n              html: dr.html || ''\r\n            });\r\n          });\r\n          setHTMLs(html);\r\n        }\r\n      }\r\n    } else if (outputType === 'measureReports') {\r\n      if (measureFile.content && patientFile.content) {\r\n        const mrResults = await Calculator.calculateMeasureReports(measureFile.content, [patientFile.content], options);\r\n        const mrs = mrResults.results;\r\n\r\n        if (calculationOptions.calculateHTML) {\r\n          const htmls: HTML[] = (Array.isArray(mrs) ? mrs : [mrs]).map(m => ({\r\n            groupId: m.id || '',\r\n            html: m.text?.div || ''\r\n          }));\r\n          setHTMLs(htmls);\r\n        }\r\n\r\n        setResults(mrs);\r\n      }\r\n    } else if (outputType === 'gapsInCare') {\r\n      if (measureFile.content && patientFile.content) {\r\n        const { results } = await Calculator.calculateGapsInCare(measureFile.content, [patientFile.content], options);\r\n\r\n        if (calculationOptions.calculateHTML) {\r\n          const measureReportEntry = results.entry?.find(e => e.resource?.resourceType === 'MeasureReport');\r\n\r\n          if (measureReportEntry?.resource) {\r\n            const measureReport = measureReportEntry.resource as R4.IMeasureReport;\r\n            setHTMLs([\r\n              {\r\n                groupId: measureReport.id || '',\r\n                html: measureReport.text?.div || ''\r\n              }\r\n            ]);\r\n          }\r\n        }\r\n\r\n        setResults(results);\r\n      }\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setMeasureFile({\r\n      name: null,\r\n      content: null\r\n    });\r\n    setPatientFile({\r\n      name: null,\r\n      content: null\r\n    });\r\n    setCalculationOptions({\r\n      calculateHTML: false,\r\n      calculateSDEs: false\r\n    });\r\n    setResults(null);\r\n    setHTMLs([]);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid>\r\n        <h1 id=\"header\">FQM Execution Demo</h1>\r\n        <Grid container justify=\"space-evenly\">\r\n          <Grid container item xs={11} spacing={2}>\r\n            <DataImportRow />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} justify=\"space-evenly\">\r\n          <Grid container item xs={11} spacing={2}>\r\n            <OptionsRow />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container justify=\"center\" direction=\"row\">\r\n          <Button variant=\"contained\" onClick={reset} className={classes.buttons}>\r\n            Reset\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={calculate}\r\n            className={classes.buttons}\r\n            disabled={measureFile.content === null || patientFile.content === null}\r\n          >\r\n            Calculate\r\n          </Button>\r\n        </Grid>\r\n        <Results measureFile={measureFile} htmls={htmls} />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { RecoilRoot } from 'recoil';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}