{"version":3,"sources":["state/calculationOptions.ts","state/outputType.ts","state/measurementPeriod.ts","state/bundles.ts","state/dropdowns.ts","state/results.ts","state/htmls.ts","components/FileUpload/FileUpload.tsx","components/Dropdowns/FileImportDropdowns.tsx","components/Utils/Loading.tsx","components/Layout/DataImportRow.tsx","components/CalculationOptions/CalculationOptions.tsx","components/CalculationOptions/MeasurementPeriod.tsx","components/CalculationOptions/OutputType.tsx","components/CalculationOptions/ReportType.tsx","components/Layout/OptionsRow.tsx","App.tsx","components/Results/Results.tsx","components/Results/PopulationResults.tsx","components/Helpers/BundleHelpers.ts","components/Results/DetectedIssueResources.tsx","components/ResultsPage.tsx","reportWebVitals.ts","index.tsx"],"names":["calculationOptionsState","atom","key","default","calculateHTML","calculateSDEs","reportType","outputTypeState","measurementPeriodState","measurementPeriodStart","Date","measurementPeriodEnd","measureFileState","name","content","patientFileState","measureDropdownSelector","selector","get","a","fetch","response","json","data","map","n","measureDropdownOptionsState","patientDropdownOptionsState","filter","startsWith","resultsState","htmlsState","Container","styled","div","props","isDragAccept","isDragReject","isDragActive","getColor","MeasureFileUpload","setMeasureFileState","useSetRecoilState","setResults","onMeasureUpload","useCallback","files","measureBundleFile","reader","FileReader","onload","path","JSON","parse","result","fromFileUpload","readAsText","useDropzone","onDrop","accept","getRootProps","getInputProps","Grid","item","xs","className","PatientFileUpload","setPatientFileState","outputType","useRecoilValue","onPatientUpload","patientBundleFile","disabled","useStyles","makeStyles","theme","createStyles","root","width","MeasureDropdown","classes","measureOptions","useRecoilState","measureFile","setMeasureFile","style","FormControl","Select","value","onChange","event","target","then","catch","error","console","log","option","MenuItem","PatientDropdown","patientFile","setPatientFile","patientOptions","Loading","container","justify","CircularProgress","fileName","color","DataImportRow","Fragment","IconButton","aria-label","onClick","fontSize","fallback","CalculationOptionsButtons","calculationOptions","setCalculationOptions","handleChange","checked","FormGroup","FormControlLabel","control","Checkbox","label","MeasurementPeriodDatePicker","measurementPeriod","setMeasurementPeriod","utils","DateFnsUtils","DatePicker","format","OutputTypeButtons","setOutputType","component","RadioGroup","Radio","ReportTypeButtons","OptionsRow","OutputType","CalculationOptions","ReportType","MeasurementPeriod","display","flexDirection","alignItems","margin","spacing","formControl","textField","marginLeft","marginRight","buttons","resultsButton","backgroundColor","App","setHTMLs","useState","hasError","setHasError","history","useHistory","onCalculateButtonClick","calculate","push","message","options","toISOString","Calculator","calculateRaw","results","html","detailedResults","forEach","dr","groupId","calculateMeasureReports","mrResults","mrs","htmls","Array","isArray","m","id","text","calculateGapsInCare","measureReportEntry","entry","find","e","resource","resourceType","measureReport","calculateDataRequirements","Collapse","in","Alert","severity","action","size","Close","direction","Button","variant","highlightedMarkup","whiteSpace","buttonContainer","justifyContent","paddingTop","Results","TabValues","detectedIssues","fhirpath","evaluate","React","selectedTab","setSelectedTab","shouldDisplayHTML","length","shouldDisplayAccordion","shouldDisplayTabular","TabContext","AppBar","position","Tabs","TabIndicatorProps","background","newTab","indicatorColor","centered","Tab","HTML","TABULAR","ACCORDION","TabPanel","fileDownload","stringify","includes","GetApp","src","enableClipboard","collapsed","group","split","issue","index","detectedIssueId","detectedIssue","table","tableCell","padding","PopulationResults","patientResource","bundle","patientID","undefined","findPatientInBundle","columns","i","rows","Table","TableHead","TableRow","column","TableCell","align","TableBody","row","popover","pointerEvents","paper","reasonDetail","paddingLeft","cursor","AccordionSummary","withStyles","borderBottom","expanded","MuiAccordionSummary","DetectedIssueResources","guidanceResponses","guidanceResponseArray","popoverContent","setPopoverContent","popup","setPopup","handlePopoverOpen","reasonDetailExtension","reference","findResourceInBundle","currentTarget","handlePopoverClose","open","Boolean","element","reasonCode","Enums","CareGapReasonCode","MISSING","PRESENT","unshift","Popover","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","onClose","tabSize","guidanceResponseId","codeFilters","valueSetObj","cf","valueSet","codeFilterArray","valueSetResource","url","findValueSetInBundle","Accordion","AccordionDetails","Link","href","concat","Typography","overflowWrap","code","df","startDate","toDateString","endDate","reason","extension","aria-owns","aria-haspopup","onMouseEnter","onMouseLeave","ResultsPage","styles","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44cbd15b.chunk.js","sourcesContent":["import { atom } from 'recoil';\nimport { CalculatorTypes } from 'fqm-execution';\n\nexport const calculationOptionsState = atom<CalculatorTypes.CalculationOptions>({\n  key: 'calculationOptions',\n  default: {\n    calculateHTML: false,\n    calculateSDEs: false,\n    reportType: 'individual'\n  }\n});\n","import { atom } from 'recoil';\n\nexport const outputTypeState = atom<string>({\n  key: 'outputType',\n  default: 'gapsInCare'\n});\n","import { atom } from 'recoil';\n\nexport interface MeasurementPeriodState {\n  measurementPeriodStart: Date | null;\n  measurementPeriodEnd: Date | null;\n}\n\nexport const measurementPeriodState = atom<MeasurementPeriodState>({\n  key: 'measurementPeriod',\n  default: {\n    measurementPeriodStart: new Date('1/1/2019'),\n    measurementPeriodEnd: new Date('12/31/2019')\n  }\n});\n","import { R4 } from '@ahryman40k/ts-fhir-types';\nimport { atom } from 'recoil';\n\nexport interface FileUploadState {\n  name: string | null;\n  content: R4.IBundle | null;\n  fromFileUpload?: boolean;\n}\n\nexport const measureFileState = atom<FileUploadState>({\n  key: 'measureFile',\n  default: {\n    name: null,\n    content: null\n  }\n});\n\nexport const patientFileState = atom<FileUploadState>({\n  key: 'patientFile',\n  default: {\n    name: null,\n    content: null\n  }\n});\n","import { atom, selector } from 'recoil';\nimport { measureFileState } from './bundles';\n\nconst measureDropdownSelector = selector({\n  key: 'measureDropdownSelector',\n  get: async () => {\n    try {\n      const response = await fetch('https://api.github.com/repos/dbcg/connectathon/contents/fhir401/bundles/measure');\n      const data = await response.json();\n\n      return data.map((n: { name: string }) => {\n        return n.name;\n      });\n    } catch (e) {\n      return [];\n    }\n  }\n});\n\nexport const measureDropdownOptionsState = atom<string[]>({\n  key: 'measureDropdownOptions',\n  default: measureDropdownSelector\n});\n\nexport const patientDropdownOptionsState = selector({\n  key: 'patientDropdownOptions',\n  get: async ({ get }) => {\n    const { name } = get(measureFileState);\n\n    if (name) {\n      try {\n        const response = await fetch(\n          `https://api.github.com/repos/dbcg/connectathon/contents/fhir401/bundles/measure/${name}/${name}-files`\n        );\n        const data = (await response.json()) as { name: string }[];\n        return data\n          .map(n => {\n            return n.name;\n          })\n          .filter(n => {\n            return n.startsWith('tests');\n          });\n      } catch (e) {\n        return [];\n      }\n    }\n\n    return [];\n  }\n});\n","import { atom } from 'recoil';\n\nexport const resultsState = atom<any>({\n  key: 'results',\n  default: null\n});\n","import { atom } from 'recoil';\n\nexport interface HTML {\n  groupId: string;\n  html: string;\n}\n\nexport const htmlsState = atom<HTML[]>({\n  key: 'htmls',\n  default: []\n});\n","import { R4 } from '@ahryman40k/ts-fhir-types';\nimport { Grid } from '@material-ui/core';\nimport React, { useCallback } from 'react';\nimport { DropzoneRootProps, useDropzone } from 'react-dropzone';\nimport { useSetRecoilState, useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { measureFileState, patientFileState, resultsState, outputTypeState } from '../../state';\n\nconst getColor = (props: DropzoneRootProps) => {\n  if (props.isDragAccept) {\n    return '#00e676';\n  }\n  if (props.isDragReject) {\n    return '#ff1744';\n  }\n  if (props.isDragActive) {\n    return '#2196f3';\n  }\n  return '#eeeeee';\n};\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${(props: DropzoneRootProps) => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #7f7f7f;\n  outline: none;\n  transition: border 0.24s ease-in-out;\n`;\n\nexport const MeasureFileUpload = () => {\n  const setMeasureFileState = useSetRecoilState(measureFileState);\n  const setResults = useSetRecoilState(resultsState);\n\n  const onMeasureUpload = useCallback(\n    files => {\n      setResults(null);\n      const measureBundleFile = files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        setMeasureFileState({\n          name: measureBundleFile.path,\n          content: JSON.parse(reader.result as string) as R4.IBundle,\n          fromFileUpload: true\n        });\n      };\n      reader.readAsText(measureBundleFile);\n    },\n    [setMeasureFileState, setResults]\n  );\n\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop: onMeasureUpload,\n    accept: '.json'\n  });\n\n  return (\n    <Grid item xs={12}>\n      <Container {...getRootProps({ className: 'dropzone', isDragActive, isDragAccept, isDragReject })}>\n        <input {...getInputProps()} />\n        <p>Drag and drop file here, or click to select file</p>\n      </Container>\n    </Grid>\n  );\n};\n\nexport const PatientFileUpload = () => {\n  const setPatientFileState = useSetRecoilState(patientFileState);\n  const setResults = useSetRecoilState(resultsState);\n  const outputType = useRecoilValue(outputTypeState);\n\n  const onPatientUpload = useCallback(\n    files => {\n      setResults(null);\n      const patientBundleFile = files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        setPatientFileState({\n          name: patientBundleFile.path,\n          content: JSON.parse(reader.result as string) as R4.IBundle,\n          fromFileUpload: true\n        });\n      };\n      reader.readAsText(patientBundleFile);\n    },\n    [setPatientFileState, setResults]\n  );\n\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop: onPatientUpload,\n    accept: '.json',\n    disabled: outputType === 'dataRequirement'\n  });\n\n  return (\n    <Grid item xs={12}>\n      <Container {...getRootProps({ className: 'dropzone', isDragActive, isDragAccept, isDragReject })}>\n        <input {...getInputProps()} />\n        <p>Drag and drop file here, or click to select file</p>\n      </Container>\n    </Grid>\n  );\n};\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport { R4 } from '@ahryman40k/ts-fhir-types';\nimport {\n  measureDropdownOptionsState,\n  measureFileState,\n  patientDropdownOptionsState,\n  patientFileState,\n  resultsState,\n  outputTypeState\n} from '../../state';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%'\n    }\n  })\n);\n\nexport function MeasureDropdown() {\n  const classes = useStyles();\n  const measureOptions = useRecoilValue(measureDropdownOptionsState);\n  const [measureFile, setMeasureFile] = useRecoilState(measureFileState);\n  const setResults = useSetRecoilState(resultsState);\n\n  const onMeasureDropdownChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setResults(null);\n    const name = event.target.value as string;\n\n    fetch(\n      `https://raw.githubusercontent.com/DBCG/connectathon/master/fhir401/bundles/measure/` +\n        name +\n        `/` +\n        name +\n        `-bundle.json`\n    )\n      .then(response => response.json())\n      .then(data => {\n        setMeasureFile({\n          name,\n          content: data as R4.IBundle,\n          fromFileUpload: false\n        });\n      })\n      .catch(error => console.log('error: ', error));\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <FormControl className={classes.root}>\n        <Select\n          value={measureFile.name || ''}\n          onChange={onMeasureDropdownChange}\n          disabled={measureFile.content !== null && measureFile.fromFileUpload === true}\n        >\n          {measureOptions.map(option => (\n            <MenuItem key={option} value={option}>\n              {option}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n\nexport function PatientDropdown() {\n  const classes = useStyles();\n\n  const [patientFile, setPatientFile] = useRecoilState(patientFileState);\n  const measureFile = useRecoilValue(measureFileState);\n  const patientOptions = useRecoilValue(patientDropdownOptionsState);\n  const setResults = useSetRecoilState(resultsState);\n  const outputType = useRecoilValue(outputTypeState);\n\n  const onPatientDropdownChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setResults(null);\n    const name = event.target.value as string;\n    fetch(\n      `https://raw.githubusercontent.com/DBCG/connectathon/master/fhir401/bundles/measure/${measureFile.name}/${measureFile.name}-files/${name}`\n    )\n      .then(response => response.json())\n      .then(data => {\n        setPatientFile({\n          name,\n          content: data as R4.IBundle,\n          fromFileUpload: false\n        });\n      })\n      .catch(error => console.log('error: ', error));\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <FormControl className={classes.root}>\n        <Select\n          value={patientFile.name || ''}\n          onChange={onPatientDropdownChange}\n          disabled={\n            (patientFile.content !== null && patientFile.fromFileUpload === true) || outputType === 'dataRequirement'\n          }\n        >\n          {patientOptions.map(option => (\n            <MenuItem key={option} value={option}>\n              {option}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport { CircularProgress, Grid } from '@material-ui/core';\n\nconst Loading = () => (\n  <Grid container justify=\"center\">\n    <CircularProgress />\n  </Grid>\n);\n\nexport default Loading;\n","import React, { Suspense } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { MeasureFileUpload, PatientFileUpload } from '../FileUpload';\nimport { MeasureDropdown, PatientDropdown } from '../Dropdowns';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\nimport { useRecoilState } from 'recoil';\nimport { measureFileState, patientFileState } from '../../state';\nimport { Loading } from '../Utils';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fileName: {\n      color: '#009688'\n    }\n  })\n);\n\nexport default function DataImportRow() {\n  const classes = useStyles();\n\n  const [measureFile, setMeasureFile] = useRecoilState(measureFileState);\n  const [patientFile, setPatientFile] = useRecoilState(patientFileState);\n\n  return (\n    <React.Fragment>\n      <Grid item xs={6}>\n        <h2>Measure Bundle: </h2>\n        <Grid container>\n          {measureFile.name !== null ? (\n            <>\n              <h3 className={classes.fileName}> {measureFile.name}</h3>\n              <IconButton\n                aria-label=\"delete\"\n                onClick={() => {\n                  setMeasureFile({\n                    name: null,\n                    content: null\n                  });\n                  setPatientFile({\n                    name: null,\n                    content: null\n                  });\n                }}\n              >\n                <DeleteIcon fontSize=\"small\" />\n              </IconButton>\n            </>\n          ) : (\n            <h3 className={classes.fileName}>None Selected</h3>\n          )}\n        </Grid>\n        <h4>Upload From File System:</h4>\n        <MeasureFileUpload />\n        <h4>OR Select From Connectathon Repository:</h4>\n        <Suspense fallback={<Loading />}>\n          <MeasureDropdown />\n        </Suspense>\n      </Grid>\n      <Grid item xs={6}>\n        <h2>Patient Bundle: </h2>\n        <Grid container>\n          {patientFile.name !== null ? (\n            <>\n              <h3 className={classes.fileName}>{patientFile.name}</h3>\n              <IconButton\n                aria-label=\"delete\"\n                onClick={() => {\n                  setPatientFile({\n                    name: null,\n                    content: null\n                  });\n                }}\n              >\n                <DeleteIcon fontSize=\"small\" />\n              </IconButton>\n            </>\n          ) : (\n            <h3 className={classes.fileName}>None Selected</h3>\n          )}\n        </Grid>\n        <h4>Upload From File System:</h4>\n        <PatientFileUpload />\n        <h4>OR Select From Connectathon Repository:</h4>\n        <Suspense fallback={<Loading />}>\n          <PatientDropdown />\n        </Suspense>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { calculationOptionsState, outputTypeState } from '../../state';\n\nfunction CalculationOptionsButtons() {\n  const outputType = useRecoilValue(outputTypeState);\n  const [calculationOptions, setCalculationOptions] = useRecoilState(calculationOptionsState);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCalculationOptions({\n      ...calculationOptions,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const shouldCheckSDE = () => {\n    return (\n      outputType !== 'rawResults' &&\n      outputType !== 'dataRequirement' &&\n      calculationOptions.reportType === 'individual' &&\n      calculationOptions.calculateSDEs\n    );\n  };\n\n  const shouldDisableSDE = () => {\n    return (\n      outputType === 'rawResults' ||\n      outputType === 'dataRequirement' ||\n      (outputType === 'measureReports' && calculationOptions.reportType === 'summary')\n    );\n  };\n\n  const shouldCheckHTML = () => {\n    return (\n      outputType !== 'rawResults' &&\n      outputType !== 'dataRequirement' &&\n      calculationOptions.reportType !== 'summary' &&\n      calculationOptions.calculateHTML\n    );\n  };\n\n  const shouldDisableHTML = () => {\n    return (\n      outputType === 'rawResults' ||\n      outputType === 'dataRequirement' ||\n      (outputType === 'measureReports' && calculationOptions.reportType === 'summary')\n    );\n  };\n\n  return (\n    <FormGroup>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={shouldCheckSDE()}\n            onChange={handleChange}\n            disabled={shouldDisableSDE()}\n            name=\"calculateSDEs\"\n            color=\"primary\"\n          />\n        }\n        label=\"Calculate SDEs\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={shouldCheckHTML()}\n            onChange={handleChange}\n            disabled={shouldDisableHTML()}\n            name=\"calculateHTML\"\n            color=\"primary\"\n          />\n        }\n        label=\"Calculate HTML\"\n      />\n    </FormGroup>\n  );\n}\n\nexport default CalculationOptionsButtons;\n","import React from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { useRecoilState } from 'recoil';\nimport { measurementPeriodState } from '../../state';\n\nfunction MeasurementPeriodDatePicker() {\n  const [measurementPeriod, setMeasurementPeriod] = useRecoilState(measurementPeriodState);\n\n  const setStart = (value: Date | null) => {\n    setMeasurementPeriod({\n      ...measurementPeriod,\n      measurementPeriodStart: value\n    });\n  };\n\n  const setEnd = (value: Date | null) => {\n    setMeasurementPeriod({\n      ...measurementPeriod,\n      measurementPeriodEnd: value\n    });\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <h3>Measurement Start: </h3>\n      <DatePicker value={measurementPeriod.measurementPeriodStart} format=\"MM/dd/yyyy\" onChange={setStart} />\n      <h3>Measurement End: </h3>\n      <DatePicker value={measurementPeriod.measurementPeriodEnd} format=\"MM/dd/yyyy\" onChange={setEnd} />\n    </MuiPickersUtilsProvider>\n  );\n}\n\nexport default MeasurementPeriodDatePicker;\n","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { useRecoilState } from 'recoil';\nimport { outputTypeState, calculationOptionsState } from '../../state';\n\nfunction OutputTypeButtons() {\n  const [outputType, setOutputType] = useRecoilState(outputTypeState);\n  const [calculationOptions, setCalculationOptions] = useRecoilState(calculationOptionsState);\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = (event.target as HTMLInputElement).value;\n    if (value === 'gapsInCare' || value === 'detailedResults') {\n      setCalculationOptions({ ...calculationOptions, reportType: 'individual' });\n    }\n    setOutputType(value);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup name=\"type\" value={outputType} onChange={handleChange}>\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"gapsInCare\" label=\"Gaps In Care\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"rawResults\" label=\"Raw\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"detailedResults\" label=\"Detailed\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"measureReports\" label=\"Measure Reports\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"dataRequirement\" label=\"Data Requirements\" />\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nexport default OutputTypeButtons;\n","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { calculationOptionsState, outputTypeState } from '../../state';\n\nfunction ReportTypeButtons() {\n  const outputType = useRecoilValue(outputTypeState);\n  const [calculationOptions, setCalculationOptions] = useRecoilState(calculationOptionsState);\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = (event.target as HTMLInputElement).value;\n    setCalculationOptions({\n      ...calculationOptions,\n      reportType: value as 'subject-list' | 'summary' | 'individual' | undefined\n    });\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup name=\"type\" value={calculationOptions.reportType} onChange={handleChange}>\n        <FormControlLabel\n          control={<Radio color=\"primary\" />}\n          value=\"individual\"\n          checked={outputType === 'measureReports' && (calculationOptions.reportType === 'individual' ?? false)}\n          label=\"Individual\"\n          disabled={outputType !== 'measureReports'}\n        />\n        <FormControlLabel\n          control={<Radio color=\"primary\" />}\n          value=\"summary\"\n          checked={outputType === 'measureReports' && (calculationOptions.reportType === 'summary' ?? false)}\n          label=\"Summary\"\n          disabled={outputType !== 'measureReports'}\n        />\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nexport default ReportTypeButtons;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {\n  CalculationOptionsButtons,\n  MeasurementPeriodDatePicker,\n  OutputTypeButtons,\n  ReportTypeButtons\n} from '../CalculationOptions';\n\nexport default function OptionsRow() {\n  return (\n    <React.Fragment>\n      <Grid item xs={3}>\n        <h3>Output Type:</h3>\n        <OutputTypeButtons />\n      </Grid>\n      <Grid item xs={3}>\n        <h3>Calculation Options:</h3>\n        <CalculationOptionsButtons />\n      </Grid>\n      <Grid item xs={3}>\n        <h3>Report Type:</h3>\n        <ReportTypeButtons />\n      </Grid>\n      <Grid item xs={3}>\n        <MeasurementPeriodDatePicker />\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React, { useState } from 'react';\nimport 'date-fns';\nimport './index.css';\nimport { Grid, IconButton } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport { Close } from '@material-ui/icons';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { OptionsRow, DataImportRow } from './components/Layout';\nimport Button from '@material-ui/core/Button';\nimport { Calculator, CalculatorTypes } from 'fqm-execution';\nimport { R4 } from '@ahryman40k/ts-fhir-types';\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport { useHistory } from 'react-router-dom';\nimport {\n  calculationOptionsState,\n  measureFileState,\n  measurementPeriodState,\n  outputTypeState,\n  patientFileState,\n  resultsState,\n  htmlsState\n} from './state';\nimport { Collapse } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex-grow',\n      flexDirection: 'column',\n      alignItems: 'center',\n\n      '& > *': {\n        margin: theme.spacing(1)\n      }\n    },\n    formControl: {\n      margin: theme.spacing(1)\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200\n    },\n    container: {\n      display: 'flex-grow'\n    },\n    buttons: {\n      margin: '4px'\n    },\n    resultsButton: {\n      backgroundColor: '#7FFF00'\n    }\n  })\n);\n\nexport interface HTML {\n  groupId: string;\n  html: string;\n}\n\nexport default function App() {\n  const classes = useStyles();\n\n  const setResults = useSetRecoilState(resultsState);\n  const [, setHTMLs] = useRecoilState(htmlsState);\n  const [hasError, setHasError] = useState(null);\n\n  const [measureFile, setMeasureFile] = useRecoilState(measureFileState);\n  const [patientFile, setPatientFile] = useRecoilState(patientFileState);\n  const [calculationOptions, setCalculationOptions] = useRecoilState(calculationOptionsState);\n  const [outputType, setOutputType] = useRecoilState(outputTypeState);\n  const measurementPeriod = useRecoilValue(measurementPeriodState);\n\n  const history = useHistory();\n\n  //Function to wrap the calculate function and catch errors in fqm-execution\n  const onCalculateButtonClick = async () => {\n    try {\n      await calculate();\n      history.push('/results');\n    } catch (error) {\n      setHasError(error.message);\n      console.error(error);\n    }\n  };\n\n  const calculate = async () => {\n    const options: CalculatorTypes.CalculationOptions = {\n      ...calculationOptions,\n      measurementPeriodStart: measurementPeriod.measurementPeriodStart?.toISOString(),\n      measurementPeriodEnd: measurementPeriod.measurementPeriodEnd?.toISOString()\n    };\n\n    // Clear existing results before new calculation\n    setResults(null);\n    setHTMLs([]);\n\n    if (outputType === 'rawResults') {\n      if (measureFile.content && patientFile.content) {\n        const { results } = await Calculator.calculateRaw(measureFile.content, [patientFile.content], options);\n        setResults(results);\n      }\n    } else if (outputType === 'detailedResults') {\n      if (measureFile.content && patientFile.content) {\n        const { results } = await Calculator.calculate(measureFile.content, [patientFile.content], options);\n        setResults(results);\n        let html: HTML[] = [];\n        if (results !== null && calculationOptions.calculateHTML === true) {\n          results[0].detailedResults?.forEach(dr => {\n            html.push({\n              groupId: dr.groupId,\n              html: dr.html || ''\n            });\n          });\n          setHTMLs(html);\n        }\n      }\n    } else if (outputType === 'measureReports') {\n      if (measureFile.content && patientFile.content) {\n        const mrResults = await Calculator.calculateMeasureReports(measureFile.content, [patientFile.content], options);\n        const mrs = mrResults.results;\n\n        if (calculationOptions.calculateHTML && calculationOptions.reportType === 'individual') {\n          const htmls: HTML[] = (Array.isArray(mrs) ? mrs : [mrs]).map(m => ({\n            groupId: m.id || '',\n            html: m.text?.div || ''\n          }));\n          setHTMLs(htmls);\n        }\n\n        setResults(mrs);\n      }\n    } else if (outputType === 'gapsInCare') {\n      if (measureFile.content && patientFile.content) {\n        const { results } = await Calculator.calculateGapsInCare(measureFile.content, [patientFile.content], options);\n        if (calculationOptions.calculateHTML) {\n          const measureReportEntry = results.entry?.find(e => e.resource?.resourceType === 'MeasureReport');\n\n          if (measureReportEntry?.resource) {\n            const measureReport = measureReportEntry.resource as R4.IMeasureReport;\n            setHTMLs([\n              {\n                groupId: measureReport.id || '',\n                html: measureReport.text?.div || ''\n              }\n            ]);\n          }\n        }\n\n        setResults(results);\n      }\n    } else if (outputType === 'dataRequirement') {\n      if (measureFile.content) {\n        const { results } = Calculator.calculateDataRequirements(measureFile.content);\n        setResults(results);\n      }\n    }\n  };\n\n  const reset = () => {\n    setMeasureFile({\n      name: null,\n      content: null\n    });\n    setPatientFile({\n      name: null,\n      content: null\n    });\n    setCalculationOptions({\n      calculateHTML: false,\n      calculateSDEs: false,\n      reportType: 'individual'\n    });\n    setOutputType('gapsInCare');\n\n    setResults(null);\n    setHTMLs([]);\n    setHasError(null);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Collapse in={hasError !== null}>\n        <Alert\n          severity=\"error\"\n          action={\n            <IconButton size=\"small\" onClick={() => setHasError(null)}>\n              <Close />\n            </IconButton>\n          }\n        >\n          {hasError}\n        </Alert>\n      </Collapse>\n      <Grid>\n        <h1 id=\"header\">FQM Execution Demo</h1>\n        <Grid container justify=\"space-evenly\">\n          <Grid container item xs={11} spacing={2}>\n            <DataImportRow />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} justify=\"space-evenly\">\n          <Grid container item xs={11} spacing={2}>\n            <OptionsRow />\n          </Grid>\n        </Grid>\n        <Grid container justify=\"center\" direction=\"row\">\n          <Button variant=\"contained\" onClick={reset} className={classes.buttons}>\n            Reset\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onCalculateButtonClick}\n            className={classes.buttons}\n            disabled={\n              measureFile.content === null || (patientFile.content === null && outputType !== 'dataRequirement')\n            }\n          >\n            Calculate\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import { makeStyles, Grid, IconButton, AppBar, Tab, Tabs } from '@material-ui/core';\nimport TabPanel from '@material-ui/lab/TabPanel';\nimport TabContext from '@material-ui/lab/TabContext';\nimport ReactJson from 'react-json-view';\nimport parse from 'html-react-parser';\nimport fileDownload from 'js-file-download';\nimport React from 'react';\nimport { FileUploadState } from '../../state';\nimport { GetApp } from '@material-ui/icons';\nimport { HTML } from '../../App';\nimport { PopulationResults, DetectedIssueResources } from '../Results';\nimport { useRecoilValue } from 'recoil';\nimport { calculationOptionsState, outputTypeState, resultsState } from '../../state';\nimport { R4 } from '@ahryman40k/ts-fhir-types';\nimport fhirpath from 'fhirpath';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles(() => ({\n  highlightedMarkup: {\n    '& pre': {\n      whiteSpace: 'pre-wrap'\n    }\n  },\n  buttonContainer: {\n    justifyContent: 'center',\n    display: 'flex',\n    paddingTop: '24px'\n  }\n}));\n\ninterface Props {\n  measureFile: FileUploadState;\n  patientFile: FileUploadState;\n  htmls: HTML[];\n}\n\nconst Results: React.FC<Props> = ({ measureFile, patientFile, htmls }) => {\n  const classes = useStyles();\n  const outputType = useRecoilValue(outputTypeState);\n  const calculationOptions = useRecoilValue(calculationOptionsState);\n  const results = useRecoilValue(resultsState);\n  const detectedIssues = fhirpath.evaluate(results, 'Bundle.entry.resource.DetectedIssue');\n\n  enum TabValues {\n    JSON = '0',\n    HTML = '1',\n    TABULAR = '2',\n    ACCORDION = '3'\n  }\n\n  const [selectedTab, setSelectedTab] = React.useState(TabValues.JSON);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newTab: TabValues) => {\n    setSelectedTab(newTab);\n  };\n\n  const history = useHistory();\n\n  const displayJSONResults = () => {\n    return (\n      <>\n        <Grid container item xs direction=\"column\" justify=\"center\" alignItems=\"center\">\n          {results && <h2>JSON:</h2>}\n          {results && (\n            <IconButton\n              onClick={() => {\n                fileDownload(\n                  JSON.stringify(results, null, 2),\n                  measureFile.name?.includes('.json')\n                    ? `results-${measureFile.name}`\n                    : `results-${measureFile.name}.json`\n                );\n              }}\n            >\n              <GetApp fontSize=\"small\" />\n            </IconButton>\n          )}\n          {results && <ReactJson src={results} enableClipboard={true} theme=\"shapeshifter:inverted\" collapsed={2} />}\n          {patientFile && outputType !== 'dataRequirement' && <h2>Patient Bundle:</h2>}\n          {patientFile && outputType !== 'dataRequirement' && (\n            <ReactJson src={patientFile} enableClipboard={true} theme=\"shapeshifter:inverted\" collapsed={2} />\n          )}\n        </Grid>\n      </>\n    );\n  };\n\n  const displayHTMLResults = () => {\n    return (\n      <Grid item xs>\n        {results &&\n          htmls &&\n          htmls.map(html => {\n            return (\n              <div key={html.groupId} className={classes.highlightedMarkup}>\n                <h2>HTML:</h2>\n                {parse(html.html)}\n              </div>\n            );\n          })}\n      </Grid>\n    );\n  };\n\n  const displayTabularResults = () => {\n    return (\n      <Grid container item xs={12} direction=\"row\" justify=\"center\" alignItems=\"center\">\n        {fhirpath.evaluate(results, 'MeasureReport.group').map((group: R4.IMeasureReport_Group) => {\n          const id = results ? fhirpath.evaluate(results, 'MeasureReport.subject.reference')[0].split('/') : '';\n          return (\n            <Grid container item xs={12} direction=\"column\" justify=\"center\" alignItems=\"center\" key={group.id}>\n              <h2>{group.id} Population Results</h2>\n              <PopulationResults key={group.id} results={group} id={id} />\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  };\n\n  const displayAccordionResults = () => {\n    return (\n      <>\n        {results &&\n          detectedIssues.map((issue: R4.IDetectedIssue, index: number) => {\n            const detectedIssueId = fhirpath.evaluate(issue, 'id');\n            return (\n              <Grid\n                container\n                item\n                xs={12}\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                key={detectedIssueId}\n              >\n                <h3>Detected Issue {index + 1}</h3>\n                <h4>{fhirpath.evaluate(issue, 'contained.GuidanceResponse').length} Guidance Response(s)</h4>\n                <DetectedIssueResources detectedIssue={issue} />\n              </Grid>\n            );\n          })}\n      </>\n    );\n  };\n\n  const shouldDisplayHTML = () => {\n    return htmls.length > 0;\n  };\n\n  const shouldDisplayAccordion = () => {\n    return outputType === 'gapsInCare';\n  };\n\n  const shouldDisplayTabular = () => {\n    return outputType === 'measureReports' && calculationOptions.reportType === 'individual';\n  };\n\n  return (\n    <TabContext value={selectedTab}>\n      <AppBar position=\"static\">\n        <Tabs\n          TabIndicatorProps={{ style: { background: 'white' } }}\n          aria-label=\"results tabs\"\n          onChange={handleChange}\n          value={selectedTab}\n          indicatorColor=\"primary\"\n          variant=\"fullWidth\"\n          centered\n        >\n          <Tab label=\"Raw JSON\" value={TabValues.JSON} />\n          {shouldDisplayHTML() && <Tab label=\"Highlighted HTML\" value={TabValues.HTML} />}\n          {shouldDisplayTabular() && <Tab label=\"Tabular\" value={TabValues.TABULAR} />}\n          {shouldDisplayAccordion() && <Tab label=\"Accordion\" value={TabValues.ACCORDION} />}\n        </Tabs>\n      </AppBar>\n      <div className={classes.buttonContainer}>\n        <Button variant=\"contained\" onClick={() => history.push('/fqm-execution-demo')}>\n          Home\n        </Button>\n      </div>\n      <TabPanel value={TabValues.JSON}>{displayJSONResults()}</TabPanel>\n      {shouldDisplayHTML() && <TabPanel value={TabValues.HTML}>{displayHTMLResults()}</TabPanel>}\n      {shouldDisplayTabular() && <TabPanel value={TabValues.TABULAR}>{displayTabularResults()}</TabPanel>}\n      {shouldDisplayAccordion() && <TabPanel value={TabValues.ACCORDION}>{displayAccordionResults()}</TabPanel>}\n    </TabContext>\n  );\n};\n\nexport default Results;\n","import { makeStyles, Table, TableRow, TableHead, TableCell, TableBody } from '@material-ui/core';\nimport { patientFileState } from '../../state';\nimport React from 'react';\nimport { findPatientInBundle } from '../Helpers';\nimport { useRecoilValue } from 'recoil';\nimport { R4 } from '@ahryman40k/ts-fhir-types';\nimport fhirpath from 'fhirpath';\n\nconst useStyles = makeStyles({\n  table: {\n    width: 100\n  },\n  tableCell: {\n    padding: '0px 10px'\n  }\n});\n\ninterface Props {\n  results: R4.IMeasureReport_Group;\n  id: string;\n}\n\nconst PopulationResults: React.FC<Props> = ({ results, id }) => {\n  const patientFile = useRecoilValue(patientFileState);\n  const patientResource = patientFile.content === null ? null : findPatientInBundle(patientFile.content, id[1]);\n  const classes = useStyles();\n\n  const columns = ['Patient Name', 'DOB', 'Gender'];\n\n  for (let i = 0; i < fhirpath.evaluate(results, 'population').length; i++) {\n    columns.push(fhirpath.evaluate(results, `population.code.coding.display[${i}]`));\n  }\n\n  const rows = [\n    `${fhirpath.evaluate(patientResource, 'Patient.name.given')} ${fhirpath.evaluate(\n      patientResource,\n      'Patient.name.family'\n    )}`,\n    fhirpath.evaluate(patientResource, 'Patient.birthDate'),\n    fhirpath.evaluate(patientResource, 'Patient.gender')\n  ];\n\n  for (let i in fhirpath.evaluate(results, 'population')) {\n    rows.push(fhirpath.evaluate(results, `population.count[${i}]`));\n  }\n\n  return (\n    <Table className={classes.table} size=\"small\">\n      <TableHead>\n        <TableRow>\n          {columns.map(column => (\n            <TableCell className={classes.tableCell} align=\"left\">\n              {column}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map(row => (\n          <TableCell align=\"left\">{row}</TableCell>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default PopulationResults;\n","import { R4 } from '@ahryman40k/ts-fhir-types';\n\nexport function findPatientInBundle(bundle: R4.IBundle, patientID: string): R4.IPatient | null {\n  const e = bundle.entry?.find(e => e.resource?.resourceType === 'Patient' && e.resource?.id === patientID);\n  if (e === undefined) {\n    return null;\n  } else {\n    return e.resource as R4.IPatient;\n  }\n}\n\nexport function findValueSetInBundle(bundle: R4.IBundle, url: string): R4.IValueSet | null {\n  const e = bundle.entry?.find(e => e.resource?.resourceType === 'ValueSet' && e.resource?.url === url);\n  if (e === undefined) {\n    return null;\n  } else {\n    return e.resource as R4.IValueSet;\n  }\n}\n\nexport function findResourceInBundle(bundle: R4.IBundle, reference: string): R4.IResourceList | null {\n  const [resourceType, id] = reference.split('/');\n  const e = bundle.entry?.find(e => e.resource?.resourceType === resourceType && e.resource?.id === id);\n  if (e === undefined) {\n    return null;\n  } else {\n    return e.resource as R4.IResourceList;\n  }\n}\n","import React from 'react';\nimport {\n  Accordion,\n  AccordionDetails,\n  Grid,\n  Link,\n  Typography,\n  withStyles,\n  Popover,\n  makeStyles,\n  createStyles,\n  Theme\n} from '@material-ui/core';\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\nimport { R4 } from '@ahryman40k/ts-fhir-types';\nimport { Enums } from 'fqm-execution';\nimport { measureFileState, patientFileState } from '../../state';\nimport { useRecoilValue } from 'recoil';\nimport { findResourceInBundle, findValueSetInBundle } from '../Helpers';\nimport fhirpath from 'fhirpath';\n\ninterface Props {\n  detectedIssue: R4.IDetectedIssue;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    popover: { pointerEvents: 'none' },\n    paper: {\n      padding: theme.spacing(1)\n    },\n    reasonDetail: {\n      paddingLeft: '32px',\n      paddingTop: '12px',\n\n      '&:hover': {\n        cursor: 'pointer'\n      }\n    }\n  })\n);\n\nconst AccordionSummary = withStyles({\n  root: {\n    backgroundColor: 'rgba(0, 0, 0, .03)',\n    borderBottom: '1px solid rgba(0, 0, 0, .125)'\n  },\n  expanded: {}\n})(MuiAccordionSummary);\n\nconst DetectedIssueResources: React.FC<Props> = ({ detectedIssue }) => {\n  const guidanceResponses = fhirpath.evaluate(detectedIssue, 'contained.GuidanceResponse');\n  const guidanceResponseArray: R4.IGuidanceResponse[] = [];\n  const measureFile = useRecoilValue(measureFileState);\n  const patientFile = useRecoilValue(patientFileState);\n  const classes = useStyles();\n  const [popoverContent, setPopoverContent] = React.useState<any>(null);\n  const [popup, setPopup] = React.useState<HTMLElement | null>(null);\n  const handlePopoverOpen = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>,\n    reasonDetailExtension: R4.IExtension\n  ) => {\n    const reference = fhirpath.evaluate(reasonDetailExtension, 'extension.valueReference.reference')[0];\n    if (patientFile.content) {\n      const resource = findResourceInBundle(patientFile.content, reference);\n      setPopup(event.currentTarget);\n      setPopoverContent(JSON.stringify(resource, null, 2));\n    }\n  };\n  const handlePopoverClose = () => {\n    setPopup(null);\n    setPopoverContent(null);\n  };\n  const open = Boolean(popup);\n\n  guidanceResponses.forEach((element: R4.IGuidanceResponse) => {\n    const reasonCode = fhirpath.evaluate(element, 'reasonCode.coding.code')[0];\n    if (reasonCode === Enums.CareGapReasonCode.MISSING || reasonCode === Enums.CareGapReasonCode.PRESENT) {\n      guidanceResponseArray.push(element);\n    } else {\n      guidanceResponseArray.unshift(element);\n    }\n  });\n\n  return (\n    <div>\n      <Popover\n        id=\"mouse-over-popover\"\n        className={classes.popover}\n        classes={{ paper: classes.paper }}\n        open={open}\n        anchorEl={popup}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'left' }}\n        onClose={handlePopoverClose}\n      >\n        <pre style={{ tabSize: 2 }}>\n          <code>{popoverContent}</code>\n        </pre>\n      </Popover>\n      {guidanceResponseArray.map((response: R4.IGuidanceResponse, index: number) => {\n        const guidanceResponseId = fhirpath.evaluate(response, 'id');\n        const codeFilters = fhirpath.evaluate(response, 'dataRequirement.codeFilter');\n        const link = 'http://hl7.org/fhir/';\n        const valueSetObj = codeFilters.find((cf: any) => cf.valueSet);\n        const codeFilterArray = codeFilters.filter((cf: any) => !cf.valueSet);\n        const valueSetResource =\n          measureFile.content === null\n            ? null\n            : findValueSetInBundle(measureFile.content, fhirpath.evaluate(valueSetObj, 'valueSet')[0]);\n\n        return (\n          <Accordion key={guidanceResponseId}>\n            <AccordionSummary>\n              <Grid item xs>\n                <h4>\n                  {fhirpath.evaluate(response, 'resourceType')} {index + 1} (\n                  {fhirpath.evaluate(response, 'reasonCode.coding.code')})\n                </h4>\n              </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Grid container item xs direction=\"row\" spacing={2}>\n                <Grid container item xs={6} direction=\"column\">\n                  <Grid item xs>\n                    <h4>Requirements:</h4>\n                  </Grid>\n                  <Grid item xs>\n                    Type:{' '}\n                    <Link href={link.concat(fhirpath.evaluate(response, 'dataRequirement.type'))}>\n                      {fhirpath.evaluate(response, 'dataRequirement.type')}\n                    </Link>\n                  </Grid>\n                  <Grid item xs>\n                    <h4>Codes:</h4>\n                    <h5>{fhirpath.evaluate(valueSetObj, 'path')}:</h5>\n                  </Grid>\n                  <Grid item xs>\n                    {valueSetResource?.name}:\n                    <Typography style={{ overflowWrap: 'break-word' }}>\n                      <Link href={fhirpath.evaluate(valueSetObj, 'valueSet')}>\n                        {fhirpath.evaluate(valueSetObj, 'valueSet')}\n                      </Link>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs>\n                    {codeFilterArray.map((cf: any) => {\n                      const path = fhirpath.evaluate(cf, 'path');\n                      return (\n                        <Grid item xs key={path}>\n                          <h5>{path}:</h5>\n                          <Grid item xs>\n                            {fhirpath.evaluate(cf, 'code.code').map((code: string) => {\n                              return (\n                                <Grid item xs key={code}>\n                                  - {code}\n                                </Grid>\n                              );\n                            })}\n                          </Grid>\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                  <Grid item xs>\n                    <h4>Dates:</h4>\n                    {fhirpath.evaluate(response, 'dataRequirement.dateFilter').map((df: any) => {\n                      const path = fhirpath.evaluate(df, 'path');\n                      const startDate = new Date(fhirpath.evaluate(df, 'valuePeriod.start')).toDateString();\n                      const endDate = new Date(fhirpath.evaluate(df, 'valuePeriod.end')).toDateString();\n                      return (\n                        <Grid item xs key={path}>\n                          <h5>{fhirpath.evaluate(df, 'path')}:</h5>\n                          <Grid item xs>\n                            {startDate === 'Invalid Date' ? 'any' : startDate} -{' '}\n                            {endDate === 'Invalid Date' ? 'any' : endDate}\n                          </Grid>\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                </Grid>\n                <Grid container item xs direction=\"column\">\n                  <Grid item xs>\n                    <h4>Reason(s):</h4>\n                    {fhirpath.evaluate(response, 'reasonCode').map((reason: R4.IGuidanceResponse) => {\n                      const code = fhirpath.evaluate(reason, 'coding.code');\n                      const display = fhirpath.evaluate(reason, 'coding.display');\n                      const extension = fhirpath.evaluate(reason, \"coding.extension.where(url='ReasonDetail')\")[0];\n\n                      return (\n                        <Grid item xs key={code}>\n                          - {code} ({display})\n                          {extension && (\n                            <div\n                              className={classes.reasonDetail}\n                              aria-owns={open ? 'mouse-over-popover' : undefined}\n                              aria-haspopup=\"true\"\n                              onMouseEnter={e => handlePopoverOpen(e, extension)}\n                              onMouseLeave={handlePopoverClose}\n                            >\n                              {fhirpath.evaluate(extension, 'extension.valueReference.reference')} (\n                              {fhirpath.evaluate(extension, 'extension.valueString')})\n                            </div>\n                          )}\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                </Grid>\n              </Grid>\n            </AccordionDetails>\n          </Accordion>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DetectedIssueResources;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { htmlsState, measureFileState, patientFileState } from '../state';\n// import { useHistory } from 'react-router-dom';\n// import Button from '@material-ui/core/Button';\nimport Results from './Results';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    padding: '20px'\n  }\n});\n\nconst ResultsPage: React.FC = () => {\n  const styles = useStyles();\n  const htmls = useRecoilValue(htmlsState);\n  const measureFile = useRecoilValue(measureFileState);\n  const patientFile = useRecoilValue(patientFileState);\n  // const history = useHistory();\n  return (\n    <div className={styles.root}>\n      {/* <Button variant=\"contained\" onClick={() => history.push('/fqm-execution-demo')}>\n        Home\n      </Button> */}\n      <Results measureFile={measureFile} patientFile={patientFile} htmls={htmls} />\n    </div>\n  );\n};\n\nexport default ResultsPage;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport './index.css';\nimport App from './App';\nimport ResultsPage from './components/ResultsPage';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Router>\n        <Route path=\"/fqm-execution-demo\">\n          <App />\n        </Route>\n        <Route path=\"/results\">\n          <ResultsPage />\n        </Route>\n      </Router>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}