{"version":3,"sources":["components/inputs/radioButtons.tsx","components/inputs/checkboxes.tsx","components/inputs/datePicker.tsx","components/formatting/optionsRow.tsx","components/fileUpload/FileUpload.tsx","components/fileImport/fileImport.tsx","components/formatting/inputRow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RadioButtonsGroup","props","FormControl","component","RadioGroup","name","value","outputType","onChange","event","setOutputType","target","FormControlLabel","control","Radio","color","label","CheckboxesGroup","handleChange","setCalculationOptions","calculationOptions","checked","FormGroup","Checkbox","includeClauseResults","includePrettyResults","includeHighlighting","calculateSDEs","calculateHTML","MeasurementDatePicker","utils","DateFnsUtils","DatePicker","measurementPeriodDate","format","setMeasurementPeriodDate","OptionsRow","Fragment","Grid","item","xs","setMeasurementPeriodStart","measurementPeriodStart","setMeasurementPeriodEnd","measurementPeriodEnd","Container","styled","div","isDragAccept","isDragReject","isDragActive","getColor","FileUpload","onDrop","useDropzone","accept","getRootProps","getInputProps","className","useStyles","makeStyles","theme","createStyles","root","width","MultipleSelect","classes","style","Select","selectedValue","options","map","option","MenuItem","InputRow","measureFileName","container","IconButton","aria-label","onClick","setMeasureFileName","setPatientOptions","setECQMPatientOptions","setPatientFileName","onMeasureUpload","showDropdowns","measureOptions","onMeasureDropdownChange","ecqmMeasureOptions","onECQMMeasureDropdownChange","Typography","variant","patientFileName","onPatientUpload","patientOptions","onPatientDropdownChange","ecqmPatientOptions","onECQMPatientDropdownChange","display","flexDirection","alignItems","margin","spacing","formControl","textField","marginLeft","marginRight","highlightedMarkup","whiteSpace","App","useState","results","setResults","htmls","setHTMLs","measureBundle","setMeasureBundle","patientBundle","setPatientBundle","setMeasureOptions","setECQMMeasureOptions","setShowDropdowns","useCallback","files","measureBundleFile","reader","FileReader","onload","path","JSON","parse","result","readAsText","patientBundleFile","Date","useEffect","fetch","then","response","json","data","names","n","status","headers","get","resetTime","parseInt","Error","catch","e","console","error","id","justify","filteredNames","filter","startsWith","log","patientName","Button","toISOString","Calculator","calculateRaw","detailedResultsCalculation","calculate","IDhtml","i","detailedResults","undefined","push","groupId","html","mrResults","calculateMeasureReports","mrs","m","text","calculateGapsInCare","direction","src","enableClipboard","collapsed","fileDownload","stringify","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a91f6671.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\ninterface Props {\n  setOutputType: Dispatch<SetStateAction<string>>;\n  outputType: string;\n}\n\nexport default function RadioButtonsGroup(props: Props) {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    props.setOutputType((event.target as HTMLInputElement).value);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup name=\"type\" value={props.outputType} onChange={handleChange}>\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"rawResults\" label=\"Raw\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"detailedResults\" label=\"Detailed\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"measureReports\" label=\"Measure Reports\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"gapsInCare\" label=\"Gaps In Care\" />\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nexport { RadioButtonsGroup };\n","import React, { Dispatch, SetStateAction } from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { CalculatorTypes } from 'fqm-execution';\n\ninterface Props {\n  setCalculationOptions: Dispatch<SetStateAction<CalculatorTypes.CalculationOptions>>;\n  calculationOptions: CalculatorTypes.CalculationOptions;\n}\n\nfunction CheckboxesGroup(props: Props) {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    props.setCalculationOptions({ ...props.calculationOptions, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <FormGroup>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={props.calculationOptions.includeClauseResults}\n            onChange={handleChange}\n            name=\"includeClauseResults\"\n            color=\"primary\"\n          />\n        }\n        label=\"Include Clause Results\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={props.calculationOptions.includePrettyResults}\n            onChange={handleChange}\n            name=\"includePrettyResults\"\n            color=\"primary\"\n          />\n        }\n        label=\"Include Pretty Results\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={props.calculationOptions.includeHighlighting}\n            onChange={handleChange}\n            name=\"includeHighlighting\"\n            color=\"primary\"\n          />\n        }\n        label=\"Include Highlighting\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={props.calculationOptions.calculateSDEs}\n            onChange={handleChange}\n            name=\"calculateSDEs\"\n            color=\"primary\"\n          />\n        }\n        label=\"Calculate SDEs\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={props.calculationOptions.calculateHTML}\n            onChange={handleChange}\n            name=\"calculateHTML\"\n            color=\"primary\"\n          />\n        }\n        label=\"Calculate HTML\"\n      />\n    </FormGroup>\n  );\n}\n\nexport { CheckboxesGroup };\n","import React, { Dispatch, SetStateAction } from 'react';\nimport DateFnsUtils from '@date-io/date-fns'; // choose your lib\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\n\ninterface Props {\n  setMeasurementPeriodDate: Dispatch<SetStateAction<Date | null>>;\n  measurementPeriodDate: Date | null;\n}\n\nfunction MeasurementDatePicker(props: Props) {\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <DatePicker value={props.measurementPeriodDate} format=\"MM/dd/yyyy\" onChange={props.setMeasurementPeriodDate} />\n    </MuiPickersUtilsProvider>\n  );\n}\n\nexport { MeasurementDatePicker };\n","import React, { Dispatch, SetStateAction } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { RadioButtonsGroup } from '../inputs/radioButtons';\nimport { CheckboxesGroup } from '../inputs/checkboxes';\nimport { MeasurementDatePicker } from '../inputs/datePicker';\nimport { CalculatorTypes } from 'fqm-execution';\n\ninterface Props {\n  setOutputType: Dispatch<SetStateAction<string>>;\n  outputType: string;\n  setMeasurementPeriodStart: Dispatch<SetStateAction<Date | null>>;\n  measurementPeriodStart: Date | null;\n  setMeasurementPeriodEnd: Dispatch<SetStateAction<Date | null>>;\n  measurementPeriodEnd: Date | null;\n  setCalculationOptions: Dispatch<SetStateAction<CalculatorTypes.CalculationOptions>>;\n  calculationOptions: CalculatorTypes.CalculationOptions;\n}\nexport default function OptionsRow(props: Props) {\n  return (\n    <React.Fragment>\n      <Grid item xs={4}>\n        <h3>Output Type:</h3>\n        <RadioButtonsGroup setOutputType={props.setOutputType} outputType={props.outputType} />\n      </Grid>\n      <Grid item xs={4}>\n        <h3>Calculation Options:</h3>\n        <CheckboxesGroup\n          setCalculationOptions={props.setCalculationOptions}\n          calculationOptions={props.calculationOptions}\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <h3>Measurement Start: </h3>\n        <MeasurementDatePicker\n          setMeasurementPeriodDate={props.setMeasurementPeriodStart}\n          measurementPeriodDate={props.measurementPeriodStart}\n        />\n        <h3>Measurement End: </h3>\n        <MeasurementDatePicker\n          setMeasurementPeriodDate={props.setMeasurementPeriodEnd}\n          measurementPeriodDate={props.measurementPeriodEnd}\n        />\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import { Grid } from '@material-ui/core';\nimport React from 'react';\nimport { DropEvent, DropzoneRootProps, FileRejection, useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\n\nconst getColor = (props: DropzoneRootProps) => {\n  if (props.isDragAccept) {\n    return '#00e676';\n  }\n  if (props.isDragReject) {\n    return '#ff1744';\n  }\n  if (props.isDragActive) {\n    return '#2196f3';\n  }\n  return '#eeeeee';\n};\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${(props: DropzoneRootProps) => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #7f7f7f;\n  outline: none;\n  transition: border 0.24s ease-in-out;\n`;\n\ninterface Props {\n  onDrop: <T extends File>(acceptedFiles: T[], fileRejections: FileRejection[], event: DropEvent) => void;\n}\n\nconst FileUpload = ({ onDrop }: Props) => {\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop,\n    accept: '.json'\n  });\n\n  return (\n    <Grid item xs={12}>\n      <Container {...getRootProps({ className: 'dropzone', isDragActive, isDragAccept, isDragReject })}>\n        <input {...getInputProps()} />\n        <p>Drag and drop file here, or click to select file</p>\n      </Container>\n    </Grid>\n  );\n};\n\nexport default FileUpload;\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%'\n    }\n  })\n);\ninterface Props {\n  options: string[];\n  handleChange: (event: React.ChangeEvent<{ value: unknown }>) => void;\n  selectedValue: string;\n}\nexport default function MultipleSelect(props: Props) {\n  const classes = useStyles();\n  return (\n    <div style={{ width: '100%' }}>\n      <FormControl className={classes.root}>\n        <Select value={props.selectedValue} onChange={props.handleChange}>\n          {props.options.map(option => (\n            <MenuItem key={option} value={option}>\n              {option}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport FileUpload from '../fileUpload/FileUpload';\nimport DropDown from '../fileImport/fileImport';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { createStyles, makeStyles, Theme, Typography } from '@material-ui/core';\n\ninterface Props {\n  onMeasureUpload: (files: any) => void;\n  onPatientUpload: (files: any) => void;\n  measureFileName: string | null;\n  setMeasureFileName: (files: any) => void;\n  patientFileName: string | null;\n  setPatientFileName: (files: any) => void;\n  onMeasureDropdownChange: (event: React.ChangeEvent<{ value: unknown }>) => void;\n  onECQMMeasureDropdownChange: (event: React.ChangeEvent<{ value: unknown }>) => void;\n  onPatientDropdownChange: (event: React.ChangeEvent<{ value: unknown }>) => void;\n  onECQMPatientDropdownChange: (event: React.ChangeEvent<{ value: unknown }>) => void;\n  measureOptions: string[];\n  ecqmMeasureOptions: string[];\n  patientOptions: string[];\n  ecqmPatientOptions: string[];\n  setPatientOptions: any;\n  setECQMPatientOptions: any;\n  showDropdowns: boolean;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      color: '#3f51b5'\n    }\n  })\n);\nexport default function InputRow(props: Props) {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Grid item xs={6}>\n        <h2>Measure Bundle: </h2>\n        {props.measureFileName !== null && <h3>Current Measure Bundle:</h3>}\n        {props.measureFileName !== null && (\n          <Grid container>\n            <h3 className={classes.root}> {props.measureFileName}</h3>\n            {props.measureFileName !== null && (\n              <IconButton\n                aria-label=\"delete\"\n                onClick={() => {\n                  props.setMeasureFileName(null);\n                  props.setPatientOptions([]);\n                  props.setECQMPatientOptions([]);\n                  props.setPatientFileName(null);\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            )}\n          </Grid>\n        )}\n        <h4>Upload From File System:</h4>\n        <FileUpload onDrop={props.onMeasureUpload} />\n        {props.showDropdowns ? (\n          <>\n            <h4>OR Select From Connectathon Repository:</h4>\n            <DropDown\n              selectedValue={props.measureFileName || ''}\n              options={props.measureOptions}\n              handleChange={props.onMeasureDropdownChange}\n            />\n            <h4>OR Select From eCQM Measure Content Repository:</h4>\n            <DropDown\n              selectedValue={props.measureFileName || ''}\n              options={props.ecqmMeasureOptions}\n              handleChange={props.onECQMMeasureDropdownChange}\n            />\n          </>\n        ) : (\n          <Typography variant=\"caption\">Loading bundles from Github is temporarily disabled</Typography>\n        )}\n      </Grid>\n      <Grid item xs={6}>\n        <h2>Patient Bundle: </h2>\n        {props.patientFileName !== null && <h3>Current Patient Bundle:</h3>}\n        {props.patientFileName !== null && (\n          <Grid container>\n            <h3 className={classes.root}> {props.patientFileName}</h3>{' '}\n            {props.patientFileName !== null && (\n              <IconButton\n                aria-label=\"delete\"\n                onClick={() => {\n                  props.setPatientFileName(null);\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            )}\n          </Grid>\n        )}\n        <h4>Upload From File System:</h4>\n        <FileUpload onDrop={props.onPatientUpload} />\n        {props.showDropdowns ? (\n          <>\n            <h4>OR Select From Connectathon Repository:</h4>\n            <DropDown\n              selectedValue={props.patientFileName || ''}\n              options={props.patientOptions}\n              handleChange={props.onPatientDropdownChange}\n            />\n            <h4>OR Select From eCQM Measure Content Repository:</h4>\n            <DropDown\n              selectedValue={props.patientFileName || ''}\n              options={props.ecqmPatientOptions}\n              handleChange={props.onECQMPatientDropdownChange}\n            />\n          </>\n        ) : (\n          <Typography variant=\"caption\">Loading bundles from Github is temporarily disabled</Typography>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React, { useCallback, useState, useEffect } from 'react';\nimport 'date-fns';\nimport './index.css';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport OptionsRow from './components/formatting/optionsRow';\nimport InputRow from './components/formatting/inputRow';\nimport Button from '@material-ui/core/Button';\nimport { Calculator, CalculatorTypes } from 'fqm-execution';\nimport ReactJson from 'react-json-view';\nimport parse from 'html-react-parser';\nimport fileDownload from 'js-file-download';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex-grow',\n      flexDirection: 'column',\n      alignItems: 'center',\n\n      '& > *': {\n        margin: theme.spacing(1)\n      }\n    },\n    formControl: {\n      margin: theme.spacing(1)\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200\n    },\n    container: {\n      display: 'flex-grow'\n    },\n    highlightedMarkup: {\n      '& pre': {\n        whiteSpace: 'pre-wrap'\n      }\n    }\n  })\n);\n\ninterface HTML {\n  groupId: string;\n  html: string;\n}\n\nexport default function App() {\n  const classes = useStyles();\n\n  const [measureFileName, setMeasureFileName] = useState<string | null>(null);\n  const [patientFileName, setPatientFileName] = useState<string | null>(null);\n\n  const [results, setResults] = useState<any>(null);\n\n  const [htmls, setHTMLs] = useState<HTML[]>([]);\n\n  const [measureBundle, setMeasureBundle] = useState<any>(null);\n  const [patientBundle, setPatientBundle] = useState<any>(null);\n\n  const [measureOptions, setMeasureOptions] = useState<string[]>([]);\n  const [ecqmMeasureOptions, setECQMMeasureOptions] = useState<string[]>([]);\n  const [patientOptions, setPatientOptions] = useState<string[]>([]);\n  const [ecqmPatientOptions, setECQMPatientOptions] = useState<string[]>([]);\n  const [showDropdowns, setShowDropdowns] = useState<boolean>(true);\n\n  const onMeasureUpload = useCallback(files => {\n    const measureBundleFile = files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setMeasureFileName(measureBundleFile.path);\n      setMeasureBundle(JSON.parse(reader.result as string));\n    };\n    reader.readAsText(measureBundleFile);\n  }, []);\n\n  const onPatientUpload = useCallback(files => {\n    const patientBundleFile = files[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setPatientFileName(patientBundleFile.path);\n      setPatientBundle(JSON.parse(reader.result as string));\n    };\n    reader.readAsText(patientBundleFile);\n  }, []);\n\n  const onECQMMeasureDropdownChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    let name = event.target.value as string;\n    fetch(\n      `https://raw.githubusercontent.com/cqframework/ecqm-content-r4/master/bundles/measure/` +\n        name +\n        `/` +\n        name +\n        `-bundle.json`\n    )\n      .then(response => response.json())\n      .then(data => {\n        setMeasureFileName(name);\n        setMeasureBundle(data);\n        return fetch(\n          `https://api.github.com/repos/cqframework/ecqm-content-r4/contents/bundles/measure/${name}/${name}-files`\n        );\n      })\n      .then(response => response.json())\n      .then(data => {\n        const names = data.map((n: { name: string }) => {\n          return n.name;\n        });\n        const filteredNames = names.filter((name: string) => {\n          return name.startsWith('tests');\n        });\n        setECQMPatientOptions(filteredNames);\n      })\n      .catch(error => console.log('error: ', error));\n  };\n\n  const onMeasureDropdownChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    let name = event.target.value as string;\n\n    fetch(\n      `https://raw.githubusercontent.com/DBCG/connectathon/master/fhir401/bundles/measure/` +\n        name +\n        `/` +\n        name +\n        `-bundle.json`\n    )\n      .then(response => response.json())\n      .then(data => {\n        setMeasureFileName(name);\n        setMeasureBundle(data);\n        return fetch(\n          `https://api.github.com/repos/dbcg/connectathon/contents/fhir401/bundles/measure/${name}/${name}-files`\n        );\n      })\n      .then(response => response.json())\n      .then(data => {\n        const names = data.map((n: { name: string }) => {\n          return n.name;\n        });\n        const filteredNames = names.filter((name: string) => {\n          return name.startsWith('tests');\n        });\n        setPatientOptions(filteredNames);\n        setECQMPatientOptions([]);\n      })\n      .catch(error => console.log('error: ', error));\n  };\n\n  const onPatientDropdownChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const patientName = event.target.value as string;\n\n    fetch(\n      `https://raw.githubusercontent.com/DBCG/connectathon/master/fhir401/bundles/measure/${measureFileName}/${measureFileName}-files/${patientName}`\n    )\n      .then(response => response.json())\n      .then(data => {\n        setPatientBundle(data);\n        setPatientFileName(patientName);\n      });\n  };\n\n  const onECQMPatientDropdownChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const patientName = event.target.value as string;\n\n    fetch(\n      `https://raw.githubusercontent.com/cqframework/ecqm-content-r4/master/bundles/measure/${measureFileName}/${measureFileName}-files/${patientName}`\n    )\n      .then(response => response.json())\n      .then(data => {\n        setPatientBundle(data);\n        setPatientFileName(patientName);\n      });\n  };\n\n  const [outputType, setOutputType] = useState<string>('raw');\n  const [measurementPeriodStart, setMeasurementPeriodStart] = useState<Date | null>(new Date('1/1/2019'));\n  const [measurementPeriodEnd, setMeasurementPeriodEnd] = useState<Date | null>(new Date('12/31/2019'));\n  const [calculationOptions, setCalculationOptions] = useState<CalculatorTypes.CalculationOptions>({\n    calculateHTML: false,\n    calculateSDEs: false,\n    includeClauseResults: false,\n    includeHighlighting: false,\n    includePrettyResults: false\n  });\n\n  useEffect(() => {\n    fetch(`https://api.github.com/repos/dbcg/connectathon/contents/fhir401/bundles/measure`)\n      .then(response => response.json())\n      .then(data => {\n        const names = data.map((n: { name: string }) => {\n          return n.name;\n        });\n        setMeasureOptions(names);\n        return fetch(`https://api.github.com/repos/cqframework/ecqm-content-r4/contents/bundles/measure`);\n      })\n      .then(response => {\n        if (response.status === 403) {\n          if (response.headers.get('X-RateLimit-Reset') != null) {\n            let resetTime = new Date(parseInt(response.headers.get('X-RateLimit-Reset') as string) * 1000);\n            throw new Error(`GitHub Rate Limited until: ${resetTime}`);\n          } else {\n            throw new Error('Auth error with GitHub.');\n          }\n        }\n        return response.json();\n      })\n      .then(data => {\n        const names = data.map((n: { name: string }) => {\n          return n.name;\n        });\n        setECQMMeasureOptions(names);\n      })\n      .catch(e => {\n        console.error('Error fetching from GitHub', e);\n        setShowDropdowns(false);\n      });\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Grid>\n        <h1 id=\"header\">FQM Execution Demo</h1>\n        <Grid container justify=\"space-evenly\">\n          <Grid container item xs={11} spacing={2} alignItems=\"center\">\n            <InputRow\n              onMeasureUpload={onMeasureUpload}\n              onPatientUpload={onPatientUpload}\n              measureFileName={measureFileName}\n              setMeasureFileName={setMeasureFileName}\n              patientFileName={patientFileName}\n              setPatientFileName={setPatientFileName}\n              onMeasureDropdownChange={onMeasureDropdownChange}\n              onECQMMeasureDropdownChange={onECQMMeasureDropdownChange}\n              onPatientDropdownChange={onPatientDropdownChange}\n              onECQMPatientDropdownChange={onECQMPatientDropdownChange}\n              measureOptions={measureOptions}\n              ecqmMeasureOptions={ecqmMeasureOptions}\n              patientOptions={patientOptions}\n              ecqmPatientOptions={ecqmPatientOptions}\n              setPatientOptions={setPatientOptions}\n              setECQMPatientOptions={setECQMPatientOptions}\n              showDropdowns={showDropdowns}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} justify=\"space-evenly\">\n          <Grid container item xs={11} spacing={2}>\n            <OptionsRow\n              setOutputType={setOutputType}\n              outputType={outputType}\n              setMeasurementPeriodStart={setMeasurementPeriodStart}\n              measurementPeriodStart={measurementPeriodStart}\n              setMeasurementPeriodEnd={setMeasurementPeriodEnd}\n              measurementPeriodEnd={measurementPeriodEnd}\n              setCalculationOptions={setCalculationOptions}\n              calculationOptions={calculationOptions}\n            />\n          </Grid>\n        </Grid>\n\n        <Grid container justify=\"flex-end\">\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              setMeasureFileName(null);\n              setPatientFileName(null);\n              setMeasureBundle(null);\n              setPatientBundle(null);\n              setMeasurementPeriodStart(new Date('1/1/2019'));\n              setMeasurementPeriodEnd(new Date('12/31/2019'));\n              setCalculationOptions({\n                calculateHTML: false,\n                calculateSDEs: false,\n                includeClauseResults: false,\n                includeHighlighting: false,\n                includePrettyResults: false\n              });\n              setResults(null);\n              setHTMLs([]);\n            }}\n          >\n            Reset\n          </Button>\n\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              const options = {\n                measurementPeriodStart: measurementPeriodStart?.toISOString(),\n                measurementPeriodEnd: measurementPeriodEnd?.toISOString(),\n                ...calculationOptions\n              };\n              if (outputType === 'rawResults') {\n                setResults(Calculator.calculateRaw(measureBundle, [patientBundle], options));\n              } else if (outputType === 'detailedResults') {\n                let detailedResultsCalculation = Calculator.calculate(measureBundle, [patientBundle], options);\n                setResults(detailedResultsCalculation);\n                let IDhtml = [];\n                if (detailedResultsCalculation !== null && calculationOptions.calculateHTML === true) {\n                  let i: any;\n                  for (i in detailedResultsCalculation.results[0].detailedResults) {\n                    if (detailedResultsCalculation.results[0].detailedResults !== undefined) {\n                      IDhtml.push({\n                        groupId: detailedResultsCalculation.results[0].detailedResults[i].groupId,\n                        html: detailedResultsCalculation.results[0].detailedResults[i].html!\n                      });\n                    }\n                  }\n                  setHTMLs(IDhtml);\n                } else {\n                  setHTMLs([]);\n                }\n              } else if (outputType === 'measureReports') {\n                const mrResults = Calculator.calculateMeasureReports(measureBundle, [patientBundle], options);\n                const mrs = mrResults.results;\n\n                if (options.calculateHTML) {\n                  const htmls: HTML[] = mrs.map(m => ({\n                    groupId: m.id || '',\n                    html: m.text?.div || ''\n                  }));\n                  setHTMLs(htmls);\n                }\n\n                setResults(mrResults);\n              } else if (outputType === 'gapsInCare') {\n                setResults(Calculator.calculateGapsInCare(measureBundle, [patientBundle], options));\n              }\n            }}\n          >\n            Calculate\n          </Button>\n        </Grid>\n        <Grid container>\n          <Grid container item xs={6} direction=\"row\">\n            <div>\n              <h2>Results:</h2>\n              {results && (\n                <ReactJson src={results} enableClipboard={true} theme=\"shapeshifter:inverted\" collapsed={2} />\n              )}\n              {results && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    fileDownload(\n                      JSON.stringify(results),\n                      measureFileName?.includes('.json')\n                        ? `results-${measureFileName}`\n                        : `results-${measureFileName}.json`\n                    );\n                  }}\n                >\n                  Download\n                </Button>\n              )}\n            </div>\n          </Grid>\n          <Grid container item xs={6} direction=\"row\">\n            {htmls &&\n              htmls.map(html => {\n                return (\n                  <div key={html.groupId} className={classes.highlightedMarkup}>\n                    <h2>HTML:</h2>\n                    {parse(html.html)}\n                  </div>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}