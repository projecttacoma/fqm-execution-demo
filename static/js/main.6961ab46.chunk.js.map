{"version":3,"sources":["state/calculationOptions.ts","state/outputType.ts","state/measurementPeriod.ts","state/bundles.ts","state/dropdowns.ts","components/FileUpload/FileUpload.tsx","components/Dropdowns/FileImportDropdowns.tsx","components/Utils/Loading.tsx","components/Layout/DataImportRow.tsx","components/CalculationOptions/CalculationOptions.tsx","components/CalculationOptions/MeasurementPeriod.tsx","components/CalculationOptions/OutputType.tsx","components/Layout/OptionsRow.tsx","components/Results/Results.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["calculationOptionsState","atom","key","default","calculateHTML","calculateSDEs","outputTypeState","measurementPeriodState","measurementPeriodStart","Date","measurementPeriodEnd","measureFileState","name","content","patientFileState","measureDropdownSelector","selector","get","a","fetch","response","json","data","map","n","measureDropdownOptionsState","patientDropdownOptionsState","filter","startsWith","Container","styled","div","props","isDragAccept","isDragReject","isDragActive","getColor","MeasureFileUpload","setMeasureFileState","useSetRecoilState","onMeasureUpload","useCallback","files","measureBundleFile","reader","FileReader","onload","path","JSON","parse","result","fromFileUpload","readAsText","useDropzone","onDrop","accept","getRootProps","getInputProps","Grid","item","xs","className","PatientFileUpload","setPatientFileState","onPatientUpload","patientBundleFile","useStyles","makeStyles","theme","createStyles","root","width","MeasureDropdown","classes","measureOptions","useRecoilValue","useRecoilState","measureFile","setMeasureFile","style","FormControl","Select","value","onChange","event","target","then","catch","error","console","log","disabled","option","MenuItem","PatientDropdown","patientFile","setPatientFile","patientOptions","Loading","container","justify","CircularProgress","fileName","color","DataImportRow","Fragment","IconButton","aria-label","onClick","fontSize","fallback","CalculationOptionsButtons","outputType","calculationOptions","setCalculationOptions","handleChange","checked","FormGroup","FormControlLabel","control","Checkbox","label","MeasurementPeriodDatePicker","measurementPeriod","setMeasurementPeriod","utils","DateFnsUtils","DatePicker","format","OutputTypeButtons","setOutputType","component","RadioGroup","Radio","OptionsRow","OutputType","CalculationOptions","MeasurementPeriod","highlightedMarkup","whiteSpace","Results","results","htmls","direction","fileDownload","stringify","includes","GetApp","src","enableClipboard","collapsed","html","groupId","display","flexDirection","alignItems","margin","spacing","formControl","textField","marginLeft","marginRight","buttons","App","useState","setResults","setHTMLs","calculate","options","toISOString","Calculator","calculateRaw","detailedResults","forEach","dr","push","calculateMeasureReports","mrResults","mrs","Array","isArray","m","id","text","calculateGapsInCare","measureReportEntry","entry","find","e","resource","resourceType","measureReport","Button","variant","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6961ab46.chunk.js","sourcesContent":["import { atom } from 'recoil';\nimport { CalculatorTypes } from 'fqm-execution';\n\nexport const calculationOptionsState = atom<CalculatorTypes.CalculationOptions>({\n  key: 'calculationOptions',\n  default: {\n    calculateHTML: false,\n    calculateSDEs: false\n  }\n});\n","import { atom } from 'recoil';\n\nexport const outputTypeState = atom<string>({\n  key: 'outputType',\n  default: 'rawResults'\n});\n","import { atom } from 'recoil';\n\nexport interface MeasurementPeriodState {\n  measurementPeriodStart: Date | null;\n  measurementPeriodEnd: Date | null;\n}\n\nexport const measurementPeriodState = atom<MeasurementPeriodState>({\n  key: 'measurementPeriod',\n  default: {\n    measurementPeriodStart: new Date('1/1/2019'),\n    measurementPeriodEnd: new Date('12/31/2019')\n  }\n});\n","import { R4 } from '@ahryman40k/ts-fhir-types';\nimport { atom } from 'recoil';\n\nexport interface FileUploadState {\n  name: string | null;\n  content: R4.IBundle | null;\n  fromFileUpload?: boolean;\n}\n\nexport const measureFileState = atom<FileUploadState>({\n  key: 'measureFile',\n  default: {\n    name: null,\n    content: null\n  }\n});\n\nexport const patientFileState = atom<FileUploadState>({\n  key: 'patientFile',\n  default: {\n    name: null,\n    content: null\n  }\n});\n","import { atom, selector } from 'recoil';\nimport { measureFileState } from './bundles';\n\nconst measureDropdownSelector = selector({\n  key: 'measureDropdownSelector',\n  get: async () => {\n    try {\n      const response = await fetch('https://api.github.com/repos/dbcg/connectathon/contents/fhir401/bundles/measure');\n      const data = await response.json();\n\n      return data.map((n: { name: string }) => {\n        return n.name;\n      });\n    } catch (e) {\n      return [];\n    }\n  }\n});\n\nexport const measureDropdownOptionsState = atom<string[]>({\n  key: 'measureDropdownOptions',\n  default: measureDropdownSelector\n});\n\nexport const patientDropdownOptionsState = selector({\n  key: 'patientDropdownOptions',\n  get: async ({ get }) => {\n    const { name } = get(measureFileState);\n\n    if (name) {\n      try {\n        const response = await fetch(\n          `https://api.github.com/repos/dbcg/connectathon/contents/fhir401/bundles/measure/${name}/${name}-files`\n        );\n        const data = (await response.json()) as { name: string }[];\n        return data\n          .map(n => {\n            return n.name;\n          })\n          .filter(n => {\n            return n.startsWith('tests');\n          });\n      } catch (e) {\n        return [];\n      }\n    }\n\n    return [];\n  }\n});\n","import { R4 } from '@ahryman40k/ts-fhir-types';\nimport { Grid } from '@material-ui/core';\nimport React, { useCallback } from 'react';\nimport { DropzoneRootProps, useDropzone } from 'react-dropzone';\nimport { useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { measureFileState, patientFileState } from '../../state';\n\nconst getColor = (props: DropzoneRootProps) => {\n  if (props.isDragAccept) {\n    return '#00e676';\n  }\n  if (props.isDragReject) {\n    return '#ff1744';\n  }\n  if (props.isDragActive) {\n    return '#2196f3';\n  }\n  return '#eeeeee';\n};\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${(props: DropzoneRootProps) => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #7f7f7f;\n  outline: none;\n  transition: border 0.24s ease-in-out;\n`;\n\nexport const MeasureFileUpload = () => {\n  const setMeasureFileState = useSetRecoilState(measureFileState);\n\n  const onMeasureUpload = useCallback(\n    files => {\n      const measureBundleFile = files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        setMeasureFileState({\n          name: measureBundleFile.path,\n          content: JSON.parse(reader.result as string) as R4.IBundle,\n          fromFileUpload: true\n        });\n      };\n      reader.readAsText(measureBundleFile);\n    },\n    [setMeasureFileState]\n  );\n\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop: onMeasureUpload,\n    accept: '.json'\n  });\n\n  return (\n    <Grid item xs={12}>\n      <Container {...getRootProps({ className: 'dropzone', isDragActive, isDragAccept, isDragReject })}>\n        <input {...getInputProps()} />\n        <p>Drag and drop file here, or click to select file</p>\n      </Container>\n    </Grid>\n  );\n};\n\nexport const PatientFileUpload = () => {\n  const setPatientFileState = useSetRecoilState(patientFileState);\n\n  const onPatientUpload = useCallback(\n    files => {\n      const patientBundleFile = files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        setPatientFileState({\n          name: patientBundleFile.path,\n          content: JSON.parse(reader.result as string) as R4.IBundle,\n          fromFileUpload: true\n        });\n      };\n      reader.readAsText(patientBundleFile);\n    },\n    [setPatientFileState]\n  );\n\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop: onPatientUpload,\n    accept: '.json'\n  });\n\n  return (\n    <Grid item xs={12}>\n      <Container {...getRootProps({ className: 'dropzone', isDragActive, isDragAccept, isDragReject })}>\n        <input {...getInputProps()} />\n        <p>Drag and drop file here, or click to select file</p>\n      </Container>\n    </Grid>\n  );\n};\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { R4 } from '@ahryman40k/ts-fhir-types';\nimport {\n  measureDropdownOptionsState,\n  measureFileState,\n  patientDropdownOptionsState,\n  patientFileState\n} from '../../state';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%'\n    }\n  })\n);\n\nexport function MeasureDropdown() {\n  const classes = useStyles();\n  const measureOptions = useRecoilValue(measureDropdownOptionsState);\n  const [measureFile, setMeasureFile] = useRecoilState(measureFileState);\n\n  const onMeasureDropdownChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const name = event.target.value as string;\n\n    fetch(\n      `https://raw.githubusercontent.com/DBCG/connectathon/master/fhir401/bundles/measure/` +\n        name +\n        `/` +\n        name +\n        `-bundle.json`\n    )\n      .then(response => response.json())\n      .then(data => {\n        setMeasureFile({\n          name,\n          content: data as R4.IBundle,\n          fromFileUpload: false\n        });\n      })\n      .catch(error => console.log('error: ', error));\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <FormControl className={classes.root}>\n        <Select\n          value={measureFile.name || ''}\n          onChange={onMeasureDropdownChange}\n          disabled={measureFile.content !== null && measureFile.fromFileUpload === true}\n        >\n          {measureOptions.map(option => (\n            <MenuItem key={option} value={option}>\n              {option}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n\nexport function PatientDropdown() {\n  const classes = useStyles();\n\n  const [patientFile, setPatientFile] = useRecoilState(patientFileState);\n  const measureFile = useRecoilValue(measureFileState);\n  const patientOptions = useRecoilValue(patientDropdownOptionsState);\n\n  const onPatientDropdownChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const name = event.target.value as string;\n    fetch(\n      `https://raw.githubusercontent.com/DBCG/connectathon/master/fhir401/bundles/measure/${measureFile.name}/${measureFile.name}-files/${name}`\n    )\n      .then(response => response.json())\n      .then(data => {\n        setPatientFile({\n          name,\n          content: data as R4.IBundle,\n          fromFileUpload: false\n        });\n      })\n      .catch(error => console.log('error: ', error));\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <FormControl className={classes.root}>\n        <Select\n          value={patientFile.name || ''}\n          onChange={onPatientDropdownChange}\n          disabled={patientFile.content !== null && patientFile.fromFileUpload === true}\n        >\n          {patientOptions.map(option => (\n            <MenuItem key={option} value={option}>\n              {option}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport { CircularProgress, Grid } from '@material-ui/core';\n\nconst Loading = () => (\n  <Grid container justify=\"center\">\n    <CircularProgress />\n  </Grid>\n);\n\nexport default Loading;\n","import React, { Suspense } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { MeasureFileUpload, PatientFileUpload } from '../FileUpload';\nimport { MeasureDropdown, PatientDropdown } from '../Dropdowns';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\nimport { useRecoilState } from 'recoil';\nimport { measureFileState, patientFileState } from '../../state';\nimport { Loading } from '../Utils';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fileName: {\n      color: '#009688'\n    }\n  })\n);\n\nexport default function DataImportRow() {\n  const classes = useStyles();\n\n  const [measureFile, setMeasureFile] = useRecoilState(measureFileState);\n  const [patientFile, setPatientFile] = useRecoilState(patientFileState);\n\n  return (\n    <React.Fragment>\n      <Grid item xs={6}>\n        <h2>Measure Bundle: </h2>\n        <Grid container>\n          {measureFile.name !== null ? (\n            <>\n              <h3 className={classes.fileName}> {measureFile.name}</h3>\n              <IconButton\n                aria-label=\"delete\"\n                onClick={() => {\n                  setMeasureFile({\n                    name: null,\n                    content: null\n                  });\n                  setPatientFile({\n                    name: null,\n                    content: null\n                  });\n                }}\n              >\n                <DeleteIcon fontSize=\"small\" />\n              </IconButton>\n            </>\n          ) : (\n            <h3 className={classes.fileName}>None Selected</h3>\n          )}\n        </Grid>\n        <h4>Upload From File System:</h4>\n        <MeasureFileUpload />\n        <h4>OR Select From Connectathon Repository:</h4>\n        <Suspense fallback={<Loading />}>\n          <MeasureDropdown />\n        </Suspense>\n      </Grid>\n      <Grid item xs={6}>\n        <h2>Patient Bundle: </h2>\n        <Grid container>\n          {patientFile.name !== null ? (\n            <>\n              <h3 className={classes.fileName}>{patientFile.name}</h3>\n              <IconButton\n                aria-label=\"delete\"\n                onClick={() => {\n                  setPatientFile({\n                    name: null,\n                    content: null\n                  });\n                }}\n              >\n                <DeleteIcon fontSize=\"small\" />\n              </IconButton>\n            </>\n          ) : (\n            <h3 className={classes.fileName}>None Selected</h3>\n          )}\n        </Grid>\n        <h4>Upload From File System:</h4>\n        <PatientFileUpload />\n        <h4>OR Select From Connectathon Repository:</h4>\n        <Suspense fallback={<Loading />}>\n          <PatientDropdown />\n        </Suspense>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { calculationOptionsState, outputTypeState } from '../../state';\n\nfunction CalculationOptionsButtons() {\n  const outputType = useRecoilValue(outputTypeState);\n  const [calculationOptions, setCalculationOptions] = useRecoilState(calculationOptionsState);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCalculationOptions({\n      ...calculationOptions,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  return (\n    <FormGroup>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={outputType !== 'rawResults' && calculationOptions.calculateSDEs}\n            onChange={handleChange}\n            disabled={outputType === 'rawResults'}\n            name=\"calculateSDEs\"\n            color=\"primary\"\n          />\n        }\n        label=\"Calculate SDEs\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={outputType !== 'rawResults' && calculationOptions.calculateHTML}\n            onChange={handleChange}\n            disabled={outputType === 'rawResults'}\n            name=\"calculateHTML\"\n            color=\"primary\"\n          />\n        }\n        label=\"Calculate HTML\"\n      />\n    </FormGroup>\n  );\n}\n\nexport default CalculationOptionsButtons;\n","import React from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { useRecoilState } from 'recoil';\nimport { measurementPeriodState } from '../../state';\n\nfunction MeasurementPeriodDatePicker() {\n  const [measurementPeriod, setMeasurementPeriod] = useRecoilState(measurementPeriodState);\n\n  const setStart = (value: Date | null) => {\n    setMeasurementPeriod({\n      ...measurementPeriod,\n      measurementPeriodStart: value\n    });\n  };\n\n  const setEnd = (value: Date | null) => {\n    setMeasurementPeriod({\n      ...measurementPeriod,\n      measurementPeriodEnd: value\n    });\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <h3>Measurement Start: </h3>\n      <DatePicker value={measurementPeriod.measurementPeriodStart} format=\"MM/dd/yyyy\" onChange={setStart} />\n      <h3>Measurement End: </h3>\n      <DatePicker value={measurementPeriod.measurementPeriodEnd} format=\"MM/dd/yyyy\" onChange={setEnd} />\n    </MuiPickersUtilsProvider>\n  );\n}\n\nexport default MeasurementPeriodDatePicker;\n","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { useRecoilState } from 'recoil';\nimport { outputTypeState } from '../../state';\n\nfunction OutputTypeButtons() {\n  const [outputType, setOutputType] = useRecoilState(outputTypeState);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = (event.target as HTMLInputElement).value;\n    setOutputType(value);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup name=\"type\" value={outputType} onChange={handleChange}>\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"rawResults\" label=\"Raw\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"detailedResults\" label=\"Detailed\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"measureReports\" label=\"Measure Reports\" />\n        <FormControlLabel control={<Radio color=\"primary\" />} value=\"gapsInCare\" label=\"Gaps In Care\" />\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nexport default OutputTypeButtons;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { CalculationOptionsButtons, MeasurementPeriodDatePicker, OutputTypeButtons } from '../CalculationOptions';\n\nexport default function OptionsRow() {\n  return (\n    <React.Fragment>\n      <Grid item xs={4}>\n        <h3>Output Type:</h3>\n        <OutputTypeButtons />\n      </Grid>\n      <Grid item xs={4}>\n        <h3>Calculation Options:</h3>\n        <CalculationOptionsButtons />\n      </Grid>\n      <Grid item xs={4}>\n        <MeasurementPeriodDatePicker />\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import { makeStyles, Grid, IconButton } from '@material-ui/core';\nimport ReactJson from 'react-json-view';\nimport parse from 'html-react-parser';\nimport fileDownload from 'js-file-download';\nimport React from 'react';\nimport { FileUploadState } from '../../state';\nimport { GetApp } from '@material-ui/icons';\nimport { HTML } from '../../App';\n\nconst useStyles = makeStyles(() => ({\n  highlightedMarkup: {\n    '& pre': {\n      whiteSpace: 'pre-wrap'\n    }\n  }\n}));\n\ninterface Props {\n  results: any;\n  measureFile: FileUploadState;\n  htmls: HTML[];\n}\n\nconst Results: React.FC<Props> = ({ results, measureFile, htmls }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container>\n      <Grid container item xs={6} direction=\"column\">\n        <Grid container direction=\"row\">\n          <h2>Results:</h2>\n          {results && (\n            <IconButton\n              onClick={() => {\n                fileDownload(\n                  JSON.stringify(results, null, 2),\n                  measureFile.name?.includes('.json')\n                    ? `results-${measureFile.name}`\n                    : `results-${measureFile.name}.json`\n                );\n              }}\n            >\n              <GetApp fontSize=\"small\" />\n            </IconButton>\n          )}\n        </Grid>\n        {results && <ReactJson src={results} enableClipboard={true} theme=\"shapeshifter:inverted\" collapsed={2} />}\n      </Grid>\n      <Grid container item xs={6}>\n        {htmls &&\n          htmls.map(html => {\n            return (\n              <div key={html.groupId} className={classes.highlightedMarkup}>\n                <h2>HTML:</h2>\n                {parse(html.html)}\n              </div>\n            );\n          })}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Results;\n","import React, { useState } from 'react';\nimport 'date-fns';\nimport './index.css';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { OptionsRow, DataImportRow } from './components/Layout';\nimport Button from '@material-ui/core/Button';\nimport { Calculator, CalculatorTypes } from 'fqm-execution';\nimport { R4 } from '@ahryman40k/ts-fhir-types';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport {\n  calculationOptionsState,\n  measureFileState,\n  measurementPeriodState,\n  outputTypeState,\n  patientFileState\n} from './state';\nimport Results from './components/Results';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex-grow',\n      flexDirection: 'column',\n      alignItems: 'center',\n\n      '& > *': {\n        margin: theme.spacing(1)\n      }\n    },\n    formControl: {\n      margin: theme.spacing(1)\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200\n    },\n    container: {\n      display: 'flex-grow'\n    },\n    buttons: {\n      margin: '4px'\n    }\n  })\n);\n\nexport interface HTML {\n  groupId: string;\n  html: string;\n}\n\nexport default function App() {\n  const classes = useStyles();\n\n  const [results, setResults] = useState<any>(null);\n  const [htmls, setHTMLs] = useState<HTML[]>([]);\n\n  const [measureFile, setMeasureFile] = useRecoilState(measureFileState);\n  const [patientFile, setPatientFile] = useRecoilState(patientFileState);\n  const [calculationOptions, setCalculationOptions] = useRecoilState(calculationOptionsState);\n  const outputType = useRecoilValue(outputTypeState);\n  const measurementPeriod = useRecoilValue(measurementPeriodState);\n\n  const calculate = async () => {\n    const options: CalculatorTypes.CalculationOptions = {\n      ...calculationOptions,\n      measurementPeriodStart: measurementPeriod.measurementPeriodStart?.toISOString(),\n      measurementPeriodEnd: measurementPeriod.measurementPeriodEnd?.toISOString()\n    };\n\n    // Clear existing results before new calculation\n    setResults(null);\n    setHTMLs([]);\n\n    if (outputType === 'rawResults') {\n      if (measureFile.content && patientFile.content) {\n        const { results } = await Calculator.calculateRaw(measureFile.content, [patientFile.content], options);\n        setResults(results);\n      }\n    } else if (outputType === 'detailedResults') {\n      if (measureFile.content && patientFile.content) {\n        const { results } = await Calculator.calculate(measureFile.content, [patientFile.content], options);\n        setResults(results);\n        let html: HTML[] = [];\n        if (results !== null && calculationOptions.calculateHTML === true) {\n          results[0].detailedResults?.forEach(dr => {\n            html.push({\n              groupId: dr.groupId,\n              html: dr.html || ''\n            });\n          });\n          setHTMLs(html);\n        }\n      }\n    } else if (outputType === 'measureReports') {\n      if (measureFile.content && patientFile.content) {\n        const mrResults = await Calculator.calculateMeasureReports(measureFile.content, [patientFile.content], options);\n        const mrs = mrResults.results;\n\n        if (calculationOptions.calculateHTML) {\n          const htmls: HTML[] = (Array.isArray(mrs) ? mrs : [mrs]).map(m => ({\n            groupId: m.id || '',\n            html: m.text?.div || ''\n          }));\n          setHTMLs(htmls);\n        }\n\n        setResults(mrs);\n      }\n    } else if (outputType === 'gapsInCare') {\n      if (measureFile.content && patientFile.content) {\n        const { results } = await Calculator.calculateGapsInCare(measureFile.content, [patientFile.content], options);\n\n        if (calculationOptions.calculateHTML) {\n          const measureReportEntry = results.entry?.find(e => e.resource?.resourceType === 'MeasureReport');\n\n          if (measureReportEntry?.resource) {\n            const measureReport = measureReportEntry.resource as R4.IMeasureReport;\n            setHTMLs([\n              {\n                groupId: measureReport.id || '',\n                html: measureReport.text?.div || ''\n              }\n            ]);\n          }\n        }\n\n        setResults(results);\n      }\n    }\n  };\n\n  const reset = () => {\n    setMeasureFile({\n      name: null,\n      content: null\n    });\n    setPatientFile({\n      name: null,\n      content: null\n    });\n    setCalculationOptions({\n      calculateHTML: false,\n      calculateSDEs: false\n    });\n    setResults(null);\n    setHTMLs([]);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid>\n        <h1 id=\"header\">FQM Execution Demo</h1>\n        <Grid container justify=\"space-evenly\">\n          <Grid container item xs={11} spacing={2}>\n            <DataImportRow />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} justify=\"space-evenly\">\n          <Grid container item xs={11} spacing={2}>\n            <OptionsRow />\n          </Grid>\n        </Grid>\n        <Grid container justify=\"center\" direction=\"row\">\n          <Button variant=\"contained\" onClick={reset} className={classes.buttons}>\n            Reset\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={calculate}\n            className={classes.buttons}\n            disabled={measureFile.content === null || patientFile.content === null}\n          >\n            Calculate\n          </Button>\n        </Grid>\n        <Results results={results} measureFile={measureFile} htmls={htmls} />\n      </Grid>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}